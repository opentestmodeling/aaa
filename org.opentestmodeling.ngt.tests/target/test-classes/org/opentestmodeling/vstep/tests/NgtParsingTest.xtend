/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.opentestmodeling.vstep.ngt.Model

@ExtendWith(InjectionExtension)
@InjectWith(NgtInjectorProvider)
class NgtParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadTestTarget() {
		val result = parseHelper.parse('''

			("Test target")

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestViewpoint() {
		val result = parseHelper.parse('''

			["Test Viewpoint"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestViewpointDetailed() {
		val result = parseHelper.parse('''

			["WinNT variants"]
			["WinNT variants", []]
			["WinNT variants", [ "2K", "XP", "VS", "7", "8"]]
			["WinNT variants", [ "2K", "XP", "VS", "7", "8"], [ importance=10, severity=5 ], "all"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void loadTestInheritance() {
		val result = parseHelper.parse('''

			("Test Target")  <|--  ["Test Viewpoint"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestInheritanceWithPrototype() {
		val result = parseHelper.parse('''

			("Test Target")  <|-<<"Prototype">>-  ["Test Viewpoint"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestRecursiveInheritanceWithPrototype() {
		val result = parseHelper.parse('''

			("Target") <|-- ["Viewpoint A"]  <|-<<Prototype>>- ["Viewpoint B"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestMultiInheritance() {
		val result = parseHelper.parse('''

			("Target") <|-- ["Viewpoint A"]
			("Target") <|-- ["Viewpoint B"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestInvalidInheritance() {
		val result = parseHelper.parse('''

			/* Must be failed as test targets can't be inherited from any viewpoints. */
			["Viewpoint"] <|-- ("Target")

		''')
		Assertions.assertNull(result)
	}

	@Test
	def void loadTestRelation() {
		val result = parseHelper.parse('''

			("Target") -- ["Viewpoint A"]
			["Viewpoint B"] -- ("Target")
			("Target") -<<stereotype>>- ["Viewpoint B"] -- ["Viewpoint C"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestDependency() {
		val result = parseHelper.parse('''

			("Target") <-- ["Viewpoint A"]
			["Viewpoint B"] <-- ("Target")
			("Target") <-<<stereotype>>- ["Viewpoint B"] <-- ["Viewpoint C"]

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadTestEscapedStereotype() {
		val result = parseHelper.parse('''

			("Target") <<1 \> 2>>

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
