/*
 * generated by Xtext 2.15.0
 */
grammar InternalNgt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.opentestmodeling.vstep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.opentestmodeling.vstep.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.opentestmodeling.vstep.services.NgtGrammarAccess;

}

@parser::members {

 	private NgtGrammarAccess grammarAccess;

    public InternalNgtParser(TokenStream input, NgtGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected NgtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsTopLevelImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleTopLevelImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.opentestmodeling.vstep.Ngt.TopLevelImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getModelAccess().getTestElementsTestNodeParserRuleCall_1_0_0_0());
						}
						lv_testElements_1_1=ruleTestNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelRule());
							}
							add(
								$current,
								"testElements",
								lv_testElements_1_1,
								"org.opentestmodeling.vstep.Ngt.TestNode");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getModelAccess().getTestElementsChainParserRuleCall_1_0_0_1());
						}
						lv_testElements_1_2=ruleChain
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelRule());
							}
							add(
								$current,
								"testElements",
								lv_testElements_1_2,
								"org.opentestmodeling.vstep.Ngt.Chain");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getModelAccess().getTestElementsTestContainerParserRuleCall_1_0_0_2());
						}
						lv_testElements_1_3=ruleTestContainer
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelRule());
							}
							add(
								$current,
								"testElements",
								lv_testElements_1_3,
								"org.opentestmodeling.vstep.Ngt.TestContainer");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getDataPackagesDataPackageParserRuleCall_1_1_0());
					}
					lv_dataPackages_2_0=ruleDataPackage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"dataPackages",
							lv_dataPackages_2_0,
							"org.opentestmodeling.vstep.Ngt.DataPackage");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getDataBindingsDataBindingParserRuleCall_1_2_0());
					}
					lv_dataBindings_3_0=ruleDataBinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"dataBindings",
							lv_dataBindings_3_0,
							"org.opentestmodeling.vstep.Ngt.DataBinding");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTopLevelImport
entryRuleTopLevelImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelImportRule()); }
	iv_ruleTopLevelImport=ruleTopLevelImport
	{ $current=$iv_ruleTopLevelImport.current; }
	EOF;

// Rule TopLevelImport
ruleTopLevelImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getTopLevelImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getTopLevelImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopLevelImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTestNode
entryRuleTestNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestNodeRule()); }
	iv_ruleTestNode=ruleTestNode
	{ $current=$iv_ruleTestNode.current; }
	EOF;

// Rule TestNode
ruleTestNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestNodeAccess().getTestTargetParserRuleCall_0());
		}
		this_TestTarget_0=ruleTestTarget
		{
			$current = $this_TestTarget_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestNodeAccess().getTestViewpointParserRuleCall_1());
		}
		this_TestViewpoint_1=ruleTestViewpoint
		{
			$current = $this_TestViewpoint_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTestTarget
entryRuleTestTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestTargetRule()); }
	iv_ruleTestTarget=ruleTestTarget
	{ $current=$iv_ruleTestTarget.current; }
	EOF;

// Rule TestTarget
ruleTestTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_TESTTARGET_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTestTargetAccess().getNameTESTTARGET_STRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestTargetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.opentestmodeling.vstep.Ngt.TESTTARGET_STRING");
				}
			)
		)
		(
			(
				lv_stereotype_1_0=RULE_STEREOTYPE_STRING
				{
					newLeafNode(lv_stereotype_1_0, grammarAccess.getTestTargetAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestTargetRule());
					}
					setWithLastConsumed(
						$current,
						"stereotype",
						lv_stereotype_1_0,
						"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleTestViewpoint
entryRuleTestViewpoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestViewpointRule()); }
	iv_ruleTestViewpoint=ruleTestViewpoint
	{ $current=$iv_ruleTestViewpoint.current; }
	EOF;

// Rule TestViewpoint
ruleTestViewpoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getTestViewpointAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestViewpointAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestViewpointRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTestViewpointAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestViewpointAccess().getTestItemsStringListParserRuleCall_2_1_0());
					}
					lv_testItems_3_0=ruleStringList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestViewpointRule());
						}
						set(
							$current,
							"testItems",
							lv_testItems_3_0,
							"org.opentestmodeling.vstep.Ngt.StringList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTestViewpointAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestViewpointAccess().getQualityRiskQualityRiskParserRuleCall_3_1_0());
					}
					lv_qualityRisk_5_0=ruleQualityRisk
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestViewpointRule());
						}
						set(
							$current,
							"qualityRisk",
							lv_qualityRisk_5_0,
							"org.opentestmodeling.vstep.Ngt.QualityRisk");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getTestViewpointAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_coverage_7_0=RULE_STRING
					{
						newLeafNode(lv_coverage_7_0, grammarAccess.getTestViewpointAccess().getCoverageSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTestViewpointRule());
						}
						setWithLastConsumed(
							$current,
							"coverage",
							lv_coverage_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getTestViewpointAccess().getRightSquareBracketKeyword_5());
		}
		(
			(
				lv_stereotype_9_0=RULE_STEREOTYPE_STRING
				{
					newLeafNode(lv_stereotype_9_0, grammarAccess.getTestViewpointAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestViewpointRule());
					}
					setWithLastConsumed(
						$current,
						"stereotype",
						lv_stereotype_9_0,
						"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleNodeConnection
entryRuleNodeConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeConnectionRule()); }
	iv_ruleNodeConnection=ruleNodeConnection
	{ $current=$iv_ruleNodeConnection.current; }
	EOF;

// Rule NodeConnection
ruleNodeConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeConnectionAccess().getInheritanceParserRuleCall_0());
		}
		this_Inheritance_0=ruleInheritance
		{
			$current = $this_Inheritance_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeConnectionAccess().getRelationParserRuleCall_1());
		}
		this_Relation_1=ruleRelation
		{
			$current = $this_Relation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeConnectionAccess().getDependencyParserRuleCall_2());
		}
		this_Dependency_2=ruleDependency
		{
			$current = $this_Dependency_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInheritance
entryRuleInheritance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInheritanceRule()); }
	iv_ruleInheritance=ruleInheritance
	{ $current=$iv_ruleInheritance.current; }
	EOF;

// Rule Inheritance
ruleInheritance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='<|--'
			{
				newLeafNode(otherlv_0, grammarAccess.getInheritanceAccess().getLessThanSignVerticalLineHyphenMinusHyphenMinusKeyword_0_0());
			}
			    |
			(
				otherlv_1='<|-'
				{
					newLeafNode(otherlv_1, grammarAccess.getInheritanceAccess().getLessThanSignVerticalLineHyphenMinusKeyword_0_1_0());
				}
				(
					(
						lv_stereotype_2_0=RULE_STEREOTYPE_STRING
						{
							newLeafNode(lv_stereotype_2_0, grammarAccess.getInheritanceAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInheritanceRule());
							}
							setWithLastConsumed(
								$current,
								"stereotype",
								lv_stereotype_2_0,
								"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
						}
					)
				)
				otherlv_3='-'
				{
					newLeafNode(otherlv_3, grammarAccess.getInheritanceAccess().getHyphenMinusKeyword_0_1_2());
				}
			)
		)
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getInheritanceAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInheritanceAccess().getSubClassTestViewpointParserRuleCall_2_0_0());
					}
					lv_subClass_5_0=ruleTestViewpoint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInheritanceRule());
						}
						set(
							$current,
							"subClass",
							lv_subClass_5_0,
							"org.opentestmodeling.vstep.Ngt.TestViewpoint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInheritanceRule());
						}
					}
					otherlv_6=RULE_STRING
					{
						newLeafNode(otherlv_6, grammarAccess.getInheritanceAccess().getRefTestViewpointCrossReference_2_1_0());
					}
				)
			)
		)
		otherlv_7=']'
		{
			newLeafNode(otherlv_7, grammarAccess.getInheritanceAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='--'
			{
				newLeafNode(otherlv_0, grammarAccess.getRelationAccess().getHyphenMinusHyphenMinusKeyword_0_0());
			}
			    |
			(
				otherlv_1='-'
				{
					newLeafNode(otherlv_1, grammarAccess.getRelationAccess().getHyphenMinusKeyword_0_1_0());
				}
				(
					(
						lv_stereotype_2_0=RULE_STEREOTYPE_STRING
						{
							newLeafNode(lv_stereotype_2_0, grammarAccess.getRelationAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed(
								$current,
								"stereotype",
								lv_stereotype_2_0,
								"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
						}
					)
				)
				otherlv_3='-'
				{
					newLeafNode(otherlv_3, grammarAccess.getRelationAccess().getHyphenMinusKeyword_0_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getSourceTestNodeParserRuleCall_1_0());
				}
				lv_source_4_0=ruleTestNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"source",
						lv_source_4_0,
						"org.opentestmodeling.vstep.Ngt.TestNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='-->'
			{
				newLeafNode(otherlv_0, grammarAccess.getDependencyAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0());
			}
			    |
			(
				otherlv_1='-'
				{
					newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getHyphenMinusKeyword_0_1_0());
				}
				(
					(
						lv_stereotype_2_0=RULE_STEREOTYPE_STRING
						{
							newLeafNode(lv_stereotype_2_0, grammarAccess.getDependencyAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDependencyRule());
							}
							setWithLastConsumed(
								$current,
								"stereotype",
								lv_stereotype_2_0,
								"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
						}
					)
				)
				otherlv_3='->'
				{
					newLeafNode(otherlv_3, grammarAccess.getDependencyAccess().getHyphenMinusGreaterThanSignKeyword_0_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDependencyAccess().getDependsOnTestNodeParserRuleCall_1_0());
				}
				lv_dependsOn_4_0=ruleTestNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependencyRule());
					}
					set(
						$current,
						"dependsOn",
						lv_dependsOn_4_0,
						"org.opentestmodeling.vstep.Ngt.TestNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChain
entryRuleChain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChainRule()); }
	iv_ruleChain=ruleChain
	{ $current=$iv_ruleChain.current; }
	EOF;

// Rule Chain
ruleChain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getChainAccess().getTargetChainParserRuleCall_0());
		}
		this_TargetChain_0=ruleTargetChain
		{
			$current = $this_TargetChain_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getChainAccess().getNodeChainParserRuleCall_1());
		}
		this_NodeChain_1=ruleNodeChain
		{
			$current = $this_NodeChain_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTargetChain
entryRuleTargetChain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetChainRule()); }
	iv_ruleTargetChain=ruleTargetChain
	{ $current=$iv_ruleTargetChain.current; }
	EOF;

// Rule TargetChain
ruleTargetChain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetChainAccess().getStartTestTargetParserRuleCall_0_0());
				}
				lv_start_0_0=ruleTestTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetChainRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"org.opentestmodeling.vstep.Ngt.TestTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetChainAccess().getConnectionsInheritanceParserRuleCall_1_0());
				}
				lv_connections_1_0=ruleInheritance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetChainRule());
					}
					add(
						$current,
						"connections",
						lv_connections_1_0,
						"org.opentestmodeling.vstep.Ngt.Inheritance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0());
				}
				lv_connections_2_0=ruleNodeConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetChainRule());
					}
					add(
						$current,
						"connections",
						lv_connections_2_0,
						"org.opentestmodeling.vstep.Ngt.NodeConnection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleNodeChain
entryRuleNodeChain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeChainRule()); }
	iv_ruleNodeChain=ruleNodeChain
	{ $current=$iv_ruleNodeChain.current; }
	EOF;

// Rule NodeChain
ruleNodeChain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeChainAccess().getStartTestNodeParserRuleCall_0_0());
				}
				lv_start_0_0=ruleTestNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeChainRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"org.opentestmodeling.vstep.Ngt.TestNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeChainAccess().getConnectionsRelationParserRuleCall_1_0_0());
					}
					lv_connections_1_1=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeChainRule());
						}
						add(
							$current,
							"connections",
							lv_connections_1_1,
							"org.opentestmodeling.vstep.Ngt.Relation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNodeChainAccess().getConnectionsDependencyParserRuleCall_1_0_1());
					}
					lv_connections_1_2=ruleDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeChainRule());
						}
						add(
							$current,
							"connections",
							lv_connections_1_2,
							"org.opentestmodeling.vstep.Ngt.Dependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0());
				}
				lv_connections_2_0=ruleNodeConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeChainRule());
					}
					add(
						$current,
						"connections",
						lv_connections_2_0,
						"org.opentestmodeling.vstep.Ngt.NodeConnection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStringList
entryRuleStringList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringListRule()); }
	iv_ruleStringList=ruleStringList
	{ $current=$iv_ruleStringList.current; }
	EOF;

// Rule StringList
ruleStringList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringListAccess().getStringListAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getStringListAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStringListAccess().getElementsSTRING_OR_NUMBERParserRuleCall_2_0_0());
					}
					lv_elements_2_0=ruleSTRING_OR_NUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringListRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStringListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStringListAccess().getElementsSTRING_OR_NUMBERParserRuleCall_2_1_1_0());
						}
						lv_elements_4_0=ruleSTRING_OR_NUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringListRule());
							}
							add(
								$current,
								"elements",
								lv_elements_4_0,
								"org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getStringListAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleQualityRisk
entryRuleQualityRisk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualityRiskRule()); }
	iv_ruleQualityRisk=ruleQualityRisk
	{ $current=$iv_ruleQualityRisk.current; }
	EOF;

// Rule QualityRisk
ruleQualityRisk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getQualityRiskAccess().getLeftSquareBracketKeyword_0());
		}
		otherlv_1='importance='
		{
			newLeafNode(otherlv_1, grammarAccess.getQualityRiskAccess().getImportanceKeyword_1());
		}
		(
			(
				lv_importance_2_0=RULE_INT
				{
					newLeafNode(lv_importance_2_0, grammarAccess.getQualityRiskAccess().getImportanceINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualityRiskRule());
					}
					setWithLastConsumed(
						$current,
						"importance",
						lv_importance_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getQualityRiskAccess().getCommaKeyword_3());
		}
		otherlv_4='severity='
		{
			newLeafNode(otherlv_4, grammarAccess.getQualityRiskAccess().getSeverityKeyword_4());
		}
		(
			(
				lv_severity_5_0=RULE_INT
				{
					newLeafNode(lv_severity_5_0, grammarAccess.getQualityRiskAccess().getSeverityINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualityRiskRule());
					}
					setWithLastConsumed(
						$current,
						"severity",
						lv_severity_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getQualityRiskAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTestContainer
entryRuleTestContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestContainerRule()); }
	iv_ruleTestContainer=ruleTestContainer
	{ $current=$iv_ruleTestContainer.current; }
	EOF;

// Rule TestContainer
ruleTestContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='container'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestContainerAccess().getContainerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestContainerAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestContainerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestContainerAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTestContainerAccess().getElementsTestContainerParserRuleCall_3_0_0());
					}
					lv_elements_3_1=ruleTestContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestContainerRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_1,
							"org.opentestmodeling.vstep.Ngt.TestContainer");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTestContainerAccess().getElementsTestNodeParserRuleCall_3_0_1());
					}
					lv_elements_3_2=ruleTestNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestContainerRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_2,
							"org.opentestmodeling.vstep.Ngt.TestNode");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestContainerAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDataPackage
entryRuleDataPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataPackageRule()); }
	iv_ruleDataPackage=ruleDataPackage
	{ $current=$iv_ruleDataPackage.current; }
	EOF;

// Rule DataPackage
ruleDataPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='data-package'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataPackageAccess().getDataPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataPackageAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataPackageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getDataPackageAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataPackageRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDataPackageAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataPackageAccess().getEntriesDataElementParserRuleCall_4_0());
				}
				lv_entries_4_0=ruleDataElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataPackageRule());
					}
					add(
						$current,
						"entries",
						lv_entries_4_0,
						"org.opentestmodeling.vstep.Ngt.DataElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDataPackageAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDataElement
entryRuleDataElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataElementRule()); }
	iv_ruleDataElement=ruleDataElement
	{ $current=$iv_ruleDataElement.current; }
	EOF;

// Rule DataElement
ruleDataElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataElementAccess().getTypeImportParserRuleCall_0());
		}
		this_TypeImport_0=ruleTypeImport
		{
			$current = $this_TypeImport_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataElementAccess().getTypeDefParserRuleCall_1());
		}
		this_TypeDef_1=ruleTypeDef
		{
			$current = $this_TypeDef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataElementAccess().getTypeInterfaceParserRuleCall_2());
		}
		this_TypeInterface_2=ruleTypeInterface
		{
			$current = $this_TypeInterface_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeImport
entryRuleTypeImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeImportRule()); }
	iv_ruleTypeImport=ruleTypeImport
	{ $current=$iv_ruleTypeImport.current; }
	EOF;

// Rule TypeImport
ruleTypeImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getTypeImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	iv_ruleTypeDef=ruleTypeDef
	{ $current=$iv_ruleTypeDef.current; }
	EOF;

// Rule TypeDef
ruleTypeDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='def'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDefAccess().getDefKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_typeSymbol_2_0=RULE_ID
				{
					newLeafNode(lv_typeSymbol_2_0, grammarAccess.getTypeDefAccess().getTypeSymbolIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDefRule());
					}
					setWithLastConsumed(
						$current,
						"typeSymbol",
						lv_typeSymbol_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleTypeInterface
entryRuleTypeInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeInterfaceRule()); }
	iv_ruleTypeInterface=ruleTypeInterface
	{ $current=$iv_ruleTypeInterface.current; }
	EOF;

// Rule TypeInterface
ruleTypeInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeInterfaceAccess().getInterfaceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeInterfaceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeInterfaceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeInterfaceAccess().getExtendsKeyword_2_0());
			}
			(
				(
					lv_super_3_0=RULE_ID
					{
						newLeafNode(lv_super_3_0, grammarAccess.getTypeInterfaceAccess().getSuperIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeInterfaceRule());
						}
						setWithLastConsumed(
							$current,
							"super",
							lv_super_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeInterfaceAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeInterfaceAccess().getImportsTypeImportParserRuleCall_4_0_0());
					}
					lv_imports_5_0=ruleTypeImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeInterfaceRule());
						}
						add(
							$current,
							"imports",
							lv_imports_5_0,
							"org.opentestmodeling.vstep.Ngt.TypeImport");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_6='type'
				{
					newLeafNode(otherlv_6, grammarAccess.getTypeInterfaceAccess().getTypeKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeInterfaceAccess().getRefsQualifiedNameParserRuleCall_4_1_1_0());
						}
						lv_refs_7_0=ruleQualifiedName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeInterfaceRule());
							}
							add(
								$current,
								"refs",
								lv_refs_7_0,
								"org.opentestmodeling.vstep.Ngt.QualifiedName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getTypeInterfaceAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDataBinding
entryRuleDataBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataBindingRule()); }
	iv_ruleDataBinding=ruleDataBinding
	{ $current=$iv_ruleDataBinding.current; }
	EOF;

// Rule DataBinding
ruleDataBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDataBindingAccess().getDataListDataListParserRuleCall_0_0());
				}
				lv_dataList_0_0=ruleDataList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataBindingRule());
					}
					set(
						$current,
						"dataList",
						lv_dataList_0_0,
						"org.opentestmodeling.vstep.Ngt.DataList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<~~>'
			{
				newLeafNode(otherlv_1, grammarAccess.getDataBindingAccess().getLessThanSignTildeTildeGreaterThanSignKeyword_1_0());
			}
			    |
			(
				otherlv_2='<~'
				{
					newLeafNode(otherlv_2, grammarAccess.getDataBindingAccess().getLessThanSignTildeKeyword_1_1_0());
				}
				(
					(
						lv_stereotype_3_0=RULE_STEREOTYPE_STRING
						{
							newLeafNode(lv_stereotype_3_0, grammarAccess.getDataBindingAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDataBindingRule());
							}
							setWithLastConsumed(
								$current,
								"stereotype",
								lv_stereotype_3_0,
								"org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
						}
					)
				)
				otherlv_4='~>'
				{
					newLeafNode(otherlv_4, grammarAccess.getDataBindingAccess().getTildeGreaterThanSignKeyword_1_1_2());
				}
			)
		)
		otherlv_5='['
		{
			newLeafNode(otherlv_5, grammarAccess.getDataBindingAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataBindingRule());
					}
				}
				otherlv_6=RULE_STRING
				{
					newLeafNode(otherlv_6, grammarAccess.getDataBindingAccess().getViewpointTestViewpointCrossReference_3_0());
				}
			)
		)
		otherlv_7=']'
		{
			newLeafNode(otherlv_7, grammarAccess.getDataBindingAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDataList
entryRuleDataList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataListRule()); }
	iv_ruleDataList=ruleDataList
	{ $current=$iv_ruleDataList.current; }
	EOF;

// Rule DataList
ruleDataList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDataListAccess().getElementsQualifiedNameParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataListRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"org.opentestmodeling.vstep.Ngt.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getDataListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataListAccess().getElementsQualifiedNameParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataListRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"org.opentestmodeling.vstep.Ngt.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleSTRING_OR_NUMBER
entryRuleSTRING_OR_NUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTRING_OR_NUMBERRule()); }
	iv_ruleSTRING_OR_NUMBER=ruleSTRING_OR_NUMBER
	{ $current=$iv_ruleSTRING_OR_NUMBER.current.getText(); }
	EOF;

// Rule STRING_OR_NUMBER
ruleSTRING_OR_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getSTRING_OR_NUMBERAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getSTRING_OR_NUMBERAccess().getINTTerminalRuleCall_1());
		}
	)
;

fragment RULE_ESCAPED_TESTTARGET_CHAR : '\\' ('n'|'t'|'r'|'\\'|'('|')');

RULE_TESTTARGET_STRING : '(' (RULE_ESCAPED_TESTTARGET_CHAR|~(('\\'|'('|')')))+ ')';

fragment RULE_ESCAPED_STEREOTYPE_CHAR : '\\' ('n'|'t'|'r'|'\\'|'<'|'>');

RULE_STEREOTYPE_STRING : '<<' (RULE_ESCAPED_STEREOTYPE_CHAR|~(('\\'|'<'|'>')))* '>>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
