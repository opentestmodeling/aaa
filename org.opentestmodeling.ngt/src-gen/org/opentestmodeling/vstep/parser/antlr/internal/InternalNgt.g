/*
 * generated by Xtext 2.15.0
 */
grammar InternalNgt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.opentestmodeling.vstep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.opentestmodeling.vstep.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.opentestmodeling.vstep.services.NgtGrammarAccess;

}

@parser::members {

 	private NgtGrammarAccess grammarAccess;

    public InternalNgtParser(TokenStream input, NgtGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected NgtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTestTargetsChainParserRuleCall_0_0());
				}
				lv_testTargets_0_1=ruleChain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"testTargets",
						lv_testTargets_0_1,
						"org.opentestmodeling.vstep.Ngt.Chain");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getModelAccess().getTestTargetsTestContainerParserRuleCall_0_1());
				}
				lv_testTargets_0_2=ruleTestContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"testTargets",
						lv_testTargets_0_2,
						"org.opentestmodeling.vstep.Ngt.TestContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleTestNode
entryRuleTestNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestNodeRule()); }
	iv_ruleTestNode=ruleTestNode
	{ $current=$iv_ruleTestNode.current; }
	EOF;

// Rule TestNode
ruleTestNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestNodeAccess().getTestTargetParserRuleCall_0());
		}
		this_TestTarget_0=ruleTestTarget
		{
			$current = $this_TestTarget_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestNodeAccess().getTestViewpointParserRuleCall_1());
		}
		this_TestViewpoint_1=ruleTestViewpoint
		{
			$current = $this_TestViewpoint_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTestTarget
entryRuleTestTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestTargetRule()); }
	iv_ruleTestTarget=ruleTestTarget
	{ $current=$iv_ruleTestTarget.current; }
	EOF;

// Rule TestTarget
ruleTestTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTestTargetAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestTargetAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestTargetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestTargetAccess().getRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestTargetAccess().getStereotypeStereotypeParserRuleCall_3_0());
				}
				lv_stereotype_3_0=ruleStereotype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestTargetRule());
					}
					set(
						$current,
						"stereotype",
						lv_stereotype_3_0,
						"org.opentestmodeling.vstep.Ngt.Stereotype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTestViewpoint
entryRuleTestViewpoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestViewpointRule()); }
	iv_ruleTestViewpoint=ruleTestViewpoint
	{ $current=$iv_ruleTestViewpoint.current; }
	EOF;

// Rule TestViewpoint
ruleTestViewpoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getTestViewpointAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestViewpointAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestViewpointRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTestViewpointAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestViewpointAccess().getTestItemsStringListParserRuleCall_2_1_0());
					}
					lv_testItems_3_0=ruleStringList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestViewpointRule());
						}
						set(
							$current,
							"testItems",
							lv_testItems_3_0,
							"org.opentestmodeling.vstep.Ngt.StringList");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTestViewpointAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestViewpointAccess().getQualityRiskQualityRiskParserRuleCall_3_1_0());
					}
					lv_qualityRisk_5_0=ruleQualityRisk
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestViewpointRule());
						}
						set(
							$current,
							"qualityRisk",
							lv_qualityRisk_5_0,
							"org.opentestmodeling.vstep.Ngt.QualityRisk");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getTestViewpointAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_coverage_7_0=RULE_STRING
					{
						newLeafNode(lv_coverage_7_0, grammarAccess.getTestViewpointAccess().getCoverageSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTestViewpointRule());
						}
						setWithLastConsumed(
							$current,
							"coverage",
							lv_coverage_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)?
		)
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getTestViewpointAccess().getRightSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestViewpointAccess().getStereotypeStereotypeParserRuleCall_6_0());
				}
				lv_stereotype_9_0=ruleStereotype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestViewpointRule());
					}
					set(
						$current,
						"stereotype",
						lv_stereotype_9_0,
						"org.opentestmodeling.vstep.Ngt.Stereotype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleInheritance
entryRuleInheritance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInheritanceRule()); }
	iv_ruleInheritance=ruleInheritance
	{ $current=$iv_ruleInheritance.current; }
	EOF;

// Rule Inheritance
ruleInheritance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInheritanceAccess().getInheritanceAction_0(),
					$current);
			}
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getInheritanceAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInheritanceAccess().getStereotypeStereotypeParserRuleCall_2_0());
				}
				lv_stereotype_2_0=ruleStereotype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInheritanceRule());
					}
					set(
						$current,
						"stereotype",
						lv_stereotype_2_0,
						"org.opentestmodeling.vstep.Ngt.Stereotype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='-|>'
		{
			newLeafNode(otherlv_3, grammarAccess.getInheritanceAccess().getHyphenMinusVerticalLineGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationAccess().getRelationAction_0(),
					$current);
			}
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getStereotypeStereotypeParserRuleCall_2_0());
				}
				lv_stereotype_2_0=ruleStereotype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"stereotype",
						lv_stereotype_2_0,
						"org.opentestmodeling.vstep.Ngt.Stereotype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='-'
		{
			newLeafNode(otherlv_3, grammarAccess.getRelationAccess().getHyphenMinusKeyword_3());
		}
	)
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDependencyAccess().getDependencyAction_0(),
					$current);
			}
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDependencyAccess().getStereotypeStereotypeParserRuleCall_2_0());
				}
				lv_stereotype_2_0=ruleStereotype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependencyRule());
					}
					set(
						$current,
						"stereotype",
						lv_stereotype_2_0,
						"org.opentestmodeling.vstep.Ngt.Stereotype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getDependencyAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleChain
entryRuleChain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChainRule()); }
	iv_ruleChain=ruleChain
	{ $current=$iv_ruleChain.current; }
	EOF;

// Rule Chain
ruleChain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getChainAccess().getStartTestNodeParserRuleCall_0_0());
				}
				lv_start_0_0=ruleTestNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"org.opentestmodeling.vstep.Ngt.TestNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChainAccess().getConnectionsNodeConnectionParserRuleCall_1_0());
				}
				lv_connections_1_0=ruleNodeConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainRule());
					}
					add(
						$current,
						"connections",
						lv_connections_1_0,
						"org.opentestmodeling.vstep.Ngt.NodeConnection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleNodeConnection
entryRuleNodeConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeConnectionRule()); }
	iv_ruleNodeConnection=ruleNodeConnection
	{ $current=$iv_ruleNodeConnection.current; }
	EOF;

// Rule NodeConnection
ruleNodeConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeConnectionAccess().getTargetConnectionParserRuleCall_0());
		}
		this_TargetConnection_0=ruleTargetConnection
		{
			$current = $this_TargetConnection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeConnectionAccess().getViewpointConnectionParserRuleCall_1());
		}
		this_ViewpointConnection_1=ruleViewpointConnection
		{
			$current = $this_ViewpointConnection_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTargetConnection
entryRuleTargetConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetConnectionRule()); }
	iv_ruleTargetConnection=ruleTargetConnection
	{ $current=$iv_ruleTargetConnection.current; }
	EOF;

// Rule TargetConnection
ruleTargetConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetConnectionAccess().getConnectorInheritanceParserRuleCall_0_0());
				}
				lv_connector_0_0=ruleInheritance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetConnectionRule());
					}
					set(
						$current,
						"connector",
						lv_connector_0_0,
						"org.opentestmodeling.vstep.Ngt.Inheritance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetConnectionAccess().getTargetTestTargetParserRuleCall_1_0());
				}
				lv_target_1_0=ruleTestTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetConnectionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"org.opentestmodeling.vstep.Ngt.TestTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleViewpointConnection
entryRuleViewpointConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getViewpointConnectionRule()); }
	iv_ruleViewpointConnection=ruleViewpointConnection
	{ $current=$iv_ruleViewpointConnection.current; }
	EOF;

// Rule ViewpointConnection
ruleViewpointConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getViewpointConnectionAccess().getConnectorRelationParserRuleCall_0_0_0());
					}
					lv_connector_0_1=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getViewpointConnectionRule());
						}
						set(
							$current,
							"connector",
							lv_connector_0_1,
							"org.opentestmodeling.vstep.Ngt.Relation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getViewpointConnectionAccess().getConnectorDependencyParserRuleCall_0_0_1());
					}
					lv_connector_0_2=ruleDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getViewpointConnectionRule());
						}
						set(
							$current,
							"connector",
							lv_connector_0_2,
							"org.opentestmodeling.vstep.Ngt.Dependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getViewpointConnectionAccess().getConnectorInheritanceParserRuleCall_0_0_2());
					}
					lv_connector_0_3=ruleInheritance
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getViewpointConnectionRule());
						}
						set(
							$current,
							"connector",
							lv_connector_0_3,
							"org.opentestmodeling.vstep.Ngt.Inheritance");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getViewpointConnectionAccess().getTargetTestNodeParserRuleCall_1_0());
				}
				lv_target_1_0=ruleTestNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getViewpointConnectionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"org.opentestmodeling.vstep.Ngt.TestNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStereotype
entryRuleStereotype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStereotypeRule()); }
	iv_ruleStereotype=ruleStereotype
	{ $current=$iv_ruleStereotype.current; }
	EOF;

// Rule Stereotype
ruleStereotype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<<'
		{
			newLeafNode(otherlv_0, grammarAccess.getStereotypeAccess().getLessThanSignLessThanSignKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStereotypeAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStereotypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='>>'
		{
			newLeafNode(otherlv_2, grammarAccess.getStereotypeAccess().getGreaterThanSignGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleStringList
entryRuleStringList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringListRule()); }
	iv_ruleStringList=ruleStringList
	{ $current=$iv_ruleStringList.current; }
	EOF;

// Rule StringList
ruleStringList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getStringListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_1_0_0());
					}
					lv_list_1_0=ruleSTRING_OR_NUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringListRule());
						}
						add(
							$current,
							"list",
							lv_list_1_0,
							"org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getStringListAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_1_1_1_0());
						}
						lv_list_3_0=ruleSTRING_OR_NUMBER
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringListRule());
							}
							add(
								$current,
								"list",
								lv_list_3_0,
								"org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringListAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleQualityRisk
entryRuleQualityRisk returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualityRiskRule()); }
	iv_ruleQualityRisk=ruleQualityRisk
	{ $current=$iv_ruleQualityRisk.current.getText(); }
	EOF;

// Rule QualityRisk
ruleQualityRisk returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='importance='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualityRiskAccess().getImportanceKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getQualityRiskAccess().getINTTerminalRuleCall_1());
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualityRiskAccess().getCommaKeyword_2());
		}
		kw='severity='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualityRiskAccess().getSeverityKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getQualityRiskAccess().getINTTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTestContainer
entryRuleTestContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestContainerRule()); }
	iv_ruleTestContainer=ruleTestContainer
	{ $current=$iv_ruleTestContainer.current; }
	EOF;

// Rule TestContainer
ruleTestContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='container'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestContainerAccess().getContainerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestContainerAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestContainerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getTestContainerAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTestContainerAccess().getElementsTestContainerParserRuleCall_2_1_0_0());
						}
						lv_elements_3_1=ruleTestContainer
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTestContainerRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_1,
								"org.opentestmodeling.vstep.Ngt.TestContainer");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getTestContainerAccess().getElementsTestNodeParserRuleCall_2_1_0_1());
						}
						lv_elements_3_2=ruleTestNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTestContainerRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_2,
								"org.opentestmodeling.vstep.Ngt.TestNode");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getTestContainerAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleContainerConnection
entryRuleContainerConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerConnectionRule()); }
	iv_ruleContainerConnection=ruleContainerConnection
	{ $current=$iv_ruleContainerConnection.current; }
	EOF;

// Rule ContainerConnection
ruleContainerConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerConnectionAccess().getConnectorRelationParserRuleCall_0_0_0());
					}
					lv_connector_0_1=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerConnectionRule());
						}
						set(
							$current,
							"connector",
							lv_connector_0_1,
							"org.opentestmodeling.vstep.Ngt.Relation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getContainerConnectionAccess().getConnectorDependencyParserRuleCall_0_0_1());
					}
					lv_connector_0_2=ruleDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerConnectionRule());
						}
						set(
							$current,
							"connector",
							lv_connector_0_2,
							"org.opentestmodeling.vstep.Ngt.Dependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerConnectionAccess().getTargetTestContainerParserRuleCall_1_0());
				}
				lv_target_1_0=ruleTestContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerConnectionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"org.opentestmodeling.vstep.Ngt.TestContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTRING_OR_NUMBER
entryRuleSTRING_OR_NUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTRING_OR_NUMBERRule()); }
	iv_ruleSTRING_OR_NUMBER=ruleSTRING_OR_NUMBER
	{ $current=$iv_ruleSTRING_OR_NUMBER.current.getText(); }
	EOF;

// Rule STRING_OR_NUMBER
ruleSTRING_OR_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getSTRING_OR_NUMBERAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getSTRING_OR_NUMBERAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
