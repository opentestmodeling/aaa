/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NgtGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsTopLevelImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTestElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cTestElementsAlternatives_1_0_0 = (Alternatives)cTestElementsAssignment_1_0.eContents().get(0);
		private final RuleCall cTestElementsTestNodeParserRuleCall_1_0_0_0 = (RuleCall)cTestElementsAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cTestElementsChainParserRuleCall_1_0_0_1 = (RuleCall)cTestElementsAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cTestElementsTestContainerParserRuleCall_1_0_0_2 = (RuleCall)cTestElementsAlternatives_1_0_0.eContents().get(2);
		private final Assignment cDataPackagesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDataPackagesDataPackageParserRuleCall_1_1_0 = (RuleCall)cDataPackagesAssignment_1_1.eContents().get(0);
		private final Assignment cDataBindingsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDataBindingsDataBindingParserRuleCall_1_2_0 = (RuleCall)cDataBindingsAssignment_1_2.eContents().get(0);
		
		//Model:
		//	imports+=TopLevelImport* (testElements+=(TestNode | Chain | TestContainer) | dataPackages+=DataPackage |
		//	dataBindings+=DataBinding)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=TopLevelImport* (testElements+=(TestNode | Chain | TestContainer) | dataPackages+=DataPackage |
		//dataBindings+=DataBinding)*
		public Group getGroup() { return cGroup; }
		
		//imports+=TopLevelImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//TopLevelImport
		public RuleCall getImportsTopLevelImportParserRuleCall_0_0() { return cImportsTopLevelImportParserRuleCall_0_0; }
		
		//(testElements+=(TestNode | Chain | TestContainer) | dataPackages+=DataPackage | dataBindings+=DataBinding)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//testElements+=(TestNode | Chain | TestContainer)
		public Assignment getTestElementsAssignment_1_0() { return cTestElementsAssignment_1_0; }
		
		//(TestNode | Chain | TestContainer)
		public Alternatives getTestElementsAlternatives_1_0_0() { return cTestElementsAlternatives_1_0_0; }
		
		//TestNode
		public RuleCall getTestElementsTestNodeParserRuleCall_1_0_0_0() { return cTestElementsTestNodeParserRuleCall_1_0_0_0; }
		
		//Chain
		public RuleCall getTestElementsChainParserRuleCall_1_0_0_1() { return cTestElementsChainParserRuleCall_1_0_0_1; }
		
		//TestContainer
		public RuleCall getTestElementsTestContainerParserRuleCall_1_0_0_2() { return cTestElementsTestContainerParserRuleCall_1_0_0_2; }
		
		//dataPackages+=DataPackage
		public Assignment getDataPackagesAssignment_1_1() { return cDataPackagesAssignment_1_1; }
		
		//DataPackage
		public RuleCall getDataPackagesDataPackageParserRuleCall_1_1_0() { return cDataPackagesDataPackageParserRuleCall_1_1_0; }
		
		//dataBindings+=DataBinding
		public Assignment getDataBindingsAssignment_1_2() { return cDataBindingsAssignment_1_2; }
		
		//DataBinding
		public RuleCall getDataBindingsDataBindingParserRuleCall_1_2_0() { return cDataBindingsDataBindingParserRuleCall_1_2_0; }
	}
	public class TopLevelImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TopLevelImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		////
		//// Import external models.
		////
		//TopLevelImport:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class TestNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestTargetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestViewpointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		//// Node related.
		////
		//TestNode:
		//	TestTarget | TestViewpoint;
		@Override public ParserRule getRule() { return rule; }
		
		//TestTarget | TestViewpoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestTarget
		public RuleCall getTestTargetParserRuleCall_0() { return cTestTargetParserRuleCall_0; }
		
		//TestViewpoint
		public RuleCall getTestViewpointParserRuleCall_1() { return cTestViewpointParserRuleCall_1; }
	}
	public class TestTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTESTTARGET_STRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStereotypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0 = (RuleCall)cStereotypeAssignment_1.eContents().get(0);
		
		//TestTarget:
		//	name=TESTTARGET_STRING stereotype=STEREOTYPE_STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=TESTTARGET_STRING stereotype=STEREOTYPE_STRING?
		public Group getGroup() { return cGroup; }
		
		//name=TESTTARGET_STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//TESTTARGET_STRING
		public RuleCall getNameTESTTARGET_STRINGTerminalRuleCall_0_0() { return cNameTESTTARGET_STRINGTerminalRuleCall_0_0; }
		
		//stereotype=STEREOTYPE_STRING?
		public Assignment getStereotypeAssignment_1() { return cStereotypeAssignment_1; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0; }
	}
	public class TestViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTestItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTestItemsStringListParserRuleCall_2_1_0 = (RuleCall)cTestItemsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualityRiskAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualityRiskQualityRiskParserRuleCall_3_1_0 = (RuleCall)cQualityRiskAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCoverageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCoverageSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cCoverageAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStereotypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0 = (RuleCall)cStereotypeAssignment_6.eContents().get(0);
		
		//TestViewpoint:
		//	'[' name=STRING (',' testItems=StringList)? (',' qualityRisk=QualityRisk)? (',' coverage=STRING)? ']'
		//	stereotype=STEREOTYPE_STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' name=STRING (',' testItems=StringList)? (',' qualityRisk=QualityRisk)? (',' coverage=STRING)? ']'
		//stereotype=STEREOTYPE_STRING?
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//(',' testItems=StringList)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//testItems=StringList
		public Assignment getTestItemsAssignment_2_1() { return cTestItemsAssignment_2_1; }
		
		//StringList
		public RuleCall getTestItemsStringListParserRuleCall_2_1_0() { return cTestItemsStringListParserRuleCall_2_1_0; }
		
		//(',' qualityRisk=QualityRisk)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//qualityRisk=QualityRisk
		public Assignment getQualityRiskAssignment_3_1() { return cQualityRiskAssignment_3_1; }
		
		//QualityRisk
		public RuleCall getQualityRiskQualityRiskParserRuleCall_3_1_0() { return cQualityRiskQualityRiskParserRuleCall_3_1_0; }
		
		//(',' coverage=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//coverage=STRING
		public Assignment getCoverageAssignment_4_1() { return cCoverageAssignment_4_1; }
		
		//STRING
		public RuleCall getCoverageSTRINGTerminalRuleCall_4_1_0() { return cCoverageSTRINGTerminalRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//stereotype=STEREOTYPE_STRING?
		public Assignment getStereotypeAssignment_6() { return cStereotypeAssignment_6; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0; }
	}
	public class NodeConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.NodeConnection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInheritanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NodeConnection:
		//	Inheritance | Relation | Dependency;
		@Override public ParserRule getRule() { return rule; }
		
		//Inheritance | Relation | Dependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Inheritance
		public RuleCall getInheritanceParserRuleCall_0() { return cInheritanceParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_2() { return cDependencyParserRuleCall_2; }
	}
	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Inheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLessThanSignVerticalLineHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignVerticalLineHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0 = (RuleCall)cStereotypeAssignment_0_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubClassAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubClassTestViewpointParserRuleCall_2_0_0 = (RuleCall)cSubClassAssignment_2_0.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cRefTestViewpointCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTestViewpointSTRINGTerminalRuleCall_2_1_0_1 = (RuleCall)cRefTestViewpointCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Inheritance:
		//	('<|--' | '<|-' stereotype=STEREOTYPE_STRING '-') '[' (subClass=TestViewpoint | ref=[TestViewpoint|STRING]) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//('<|--' | '<|-' stereotype=STEREOTYPE_STRING '-') '[' (subClass=TestViewpoint | ref=[TestViewpoint|STRING]) ']'
		public Group getGroup() { return cGroup; }
		
		//'<|--' | '<|-' stereotype=STEREOTYPE_STRING '-'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'<|--'
		public Keyword getLessThanSignVerticalLineHyphenMinusHyphenMinusKeyword_0_0() { return cLessThanSignVerticalLineHyphenMinusHyphenMinusKeyword_0_0; }
		
		//'<|-' stereotype=STEREOTYPE_STRING '-'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'<|-'
		public Keyword getLessThanSignVerticalLineHyphenMinusKeyword_0_1_0() { return cLessThanSignVerticalLineHyphenMinusKeyword_0_1_0; }
		
		//stereotype=STEREOTYPE_STRING
		public Assignment getStereotypeAssignment_0_1_1() { return cStereotypeAssignment_0_1_1; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_2() { return cHyphenMinusKeyword_0_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//subClass=TestViewpoint | ref=[TestViewpoint|STRING]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//subClass=TestViewpoint
		public Assignment getSubClassAssignment_2_0() { return cSubClassAssignment_2_0; }
		
		//TestViewpoint
		public RuleCall getSubClassTestViewpointParserRuleCall_2_0_0() { return cSubClassTestViewpointParserRuleCall_2_0_0; }
		
		//ref=[TestViewpoint|STRING]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[TestViewpoint|STRING]
		public CrossReference getRefTestViewpointCrossReference_2_1_0() { return cRefTestViewpointCrossReference_2_1_0; }
		
		//STRING
		public RuleCall getRefTestViewpointSTRINGTerminalRuleCall_2_1_0_1() { return cRefTestViewpointSTRINGTerminalRuleCall_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0 = (RuleCall)cStereotypeAssignment_0_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceTestNodeParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		
		//Relation:
		//	('--' | '-' stereotype=STEREOTYPE_STRING '-') source=TestNode;
		@Override public ParserRule getRule() { return rule; }
		
		//('--' | '-' stereotype=STEREOTYPE_STRING '-') source=TestNode
		public Group getGroup() { return cGroup; }
		
		//'--' | '-' stereotype=STEREOTYPE_STRING '-'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_0_0() { return cHyphenMinusHyphenMinusKeyword_0_0; }
		
		//'-' stereotype=STEREOTYPE_STRING '-'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_0() { return cHyphenMinusKeyword_0_1_0; }
		
		//stereotype=STEREOTYPE_STRING
		public Assignment getStereotypeAssignment_0_1_1() { return cStereotypeAssignment_0_1_1; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_2() { return cHyphenMinusKeyword_0_1_2; }
		
		//source=TestNode
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//TestNode
		public RuleCall getSourceTestNodeParserRuleCall_1_0() { return cSourceTestNodeParserRuleCall_1_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0 = (RuleCall)cStereotypeAssignment_0_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cDependsOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependsOnTestNodeParserRuleCall_1_0 = (RuleCall)cDependsOnAssignment_1.eContents().get(0);
		
		//Dependency:
		//	('-->' | '-' stereotype=STEREOTYPE_STRING '->') dependsOn=TestNode;
		@Override public ParserRule getRule() { return rule; }
		
		//('-->' | '-' stereotype=STEREOTYPE_STRING '->') dependsOn=TestNode
		public Group getGroup() { return cGroup; }
		
		//'-->' | '-' stereotype=STEREOTYPE_STRING '->'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//'-' stereotype=STEREOTYPE_STRING '->'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_0() { return cHyphenMinusKeyword_0_1_0; }
		
		//stereotype=STEREOTYPE_STRING
		public Assignment getStereotypeAssignment_0_1_1() { return cStereotypeAssignment_0_1_1; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_0_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1_2() { return cHyphenMinusGreaterThanSignKeyword_0_1_2; }
		
		//dependsOn=TestNode
		public Assignment getDependsOnAssignment_1() { return cDependsOnAssignment_1; }
		
		//TestNode
		public RuleCall getDependsOnTestNodeParserRuleCall_1_0() { return cDependsOnTestNodeParserRuleCall_1_0; }
	}
	public class ChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Chain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTargetChainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeChainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Chain:
		//	TargetChain | NodeChain;
		@Override public ParserRule getRule() { return rule; }
		
		//TargetChain | NodeChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TargetChain
		public RuleCall getTargetChainParserRuleCall_0() { return cTargetChainParserRuleCall_0; }
		
		//NodeChain
		public RuleCall getNodeChainParserRuleCall_1() { return cNodeChainParserRuleCall_1; }
	}
	public class TargetChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TargetChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTestTargetParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsInheritanceParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		private final Assignment cConnectionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectionsNodeConnectionParserRuleCall_2_0 = (RuleCall)cConnectionsAssignment_2.eContents().get(0);
		
		//TargetChain:
		//	start=TestTarget connections+=Inheritance connections+=NodeConnection*;
		@Override public ParserRule getRule() { return rule; }
		
		//start=TestTarget connections+=Inheritance connections+=NodeConnection*
		public Group getGroup() { return cGroup; }
		
		//start=TestTarget
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//TestTarget
		public RuleCall getStartTestTargetParserRuleCall_0_0() { return cStartTestTargetParserRuleCall_0_0; }
		
		//connections+=Inheritance
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//Inheritance
		public RuleCall getConnectionsInheritanceParserRuleCall_1_0() { return cConnectionsInheritanceParserRuleCall_1_0; }
		
		//connections+=NodeConnection*
		public Assignment getConnectionsAssignment_2() { return cConnectionsAssignment_2; }
		
		//NodeConnection
		public RuleCall getConnectionsNodeConnectionParserRuleCall_2_0() { return cConnectionsNodeConnectionParserRuleCall_2_0; }
	}
	public class NodeChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.NodeChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTestNodeParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cConnectionsAlternatives_1_0 = (Alternatives)cConnectionsAssignment_1.eContents().get(0);
		private final RuleCall cConnectionsRelationParserRuleCall_1_0_0 = (RuleCall)cConnectionsAlternatives_1_0.eContents().get(0);
		private final RuleCall cConnectionsDependencyParserRuleCall_1_0_1 = (RuleCall)cConnectionsAlternatives_1_0.eContents().get(1);
		private final Assignment cConnectionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectionsNodeConnectionParserRuleCall_2_0 = (RuleCall)cConnectionsAssignment_2.eContents().get(0);
		
		//NodeChain:
		//	start=TestNode connections+=(Relation | Dependency) connections+=NodeConnection*;
		@Override public ParserRule getRule() { return rule; }
		
		//start=TestNode connections+=(Relation | Dependency) connections+=NodeConnection*
		public Group getGroup() { return cGroup; }
		
		//start=TestNode
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//TestNode
		public RuleCall getStartTestNodeParserRuleCall_0_0() { return cStartTestNodeParserRuleCall_0_0; }
		
		//connections+=(Relation | Dependency)
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//(Relation | Dependency)
		public Alternatives getConnectionsAlternatives_1_0() { return cConnectionsAlternatives_1_0; }
		
		//Relation
		public RuleCall getConnectionsRelationParserRuleCall_1_0_0() { return cConnectionsRelationParserRuleCall_1_0_0; }
		
		//Dependency
		public RuleCall getConnectionsDependencyParserRuleCall_1_0_1() { return cConnectionsDependencyParserRuleCall_1_0_1; }
		
		//connections+=NodeConnection*
		public Assignment getConnectionsAssignment_2() { return cConnectionsAssignment_2; }
		
		//NodeConnection
		public RuleCall getConnectionsNodeConnectionParserRuleCall_2_0() { return cConnectionsNodeConnectionParserRuleCall_2_0; }
	}
	public class StringListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.StringList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsSTRING_OR_NUMBERParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsSTRING_OR_NUMBERParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringList:
		//	{StringList} '[' (elements+=STRING_OR_NUMBER (',' elements+=STRING_OR_NUMBER)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringList} '[' (elements+=STRING_OR_NUMBER (',' elements+=STRING_OR_NUMBER)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{StringList}
		public Action getStringListAction_0() { return cStringListAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(elements+=STRING_OR_NUMBER (',' elements+=STRING_OR_NUMBER)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=STRING_OR_NUMBER
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//STRING_OR_NUMBER
		public RuleCall getElementsSTRING_OR_NUMBERParserRuleCall_2_0_0() { return cElementsSTRING_OR_NUMBERParserRuleCall_2_0_0; }
		
		//(',' elements+=STRING_OR_NUMBER)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=STRING_OR_NUMBER
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//STRING_OR_NUMBER
		public RuleCall getElementsSTRING_OR_NUMBERParserRuleCall_2_1_1_0() { return cElementsSTRING_OR_NUMBERParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class QualityRiskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.QualityRisk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cImportanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportanceINTTerminalRuleCall_2_0 = (RuleCall)cImportanceAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSeverityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSeverityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSeverityINTTerminalRuleCall_5_0 = (RuleCall)cSeverityAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QualityRisk:
		//	'[' 'importance=' importance=INT ',' 'severity=' severity=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' 'importance=' importance=INT ',' 'severity=' severity=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//'importance='
		public Keyword getImportanceKeyword_1() { return cImportanceKeyword_1; }
		
		//importance=INT
		public Assignment getImportanceAssignment_2() { return cImportanceAssignment_2; }
		
		//INT
		public RuleCall getImportanceINTTerminalRuleCall_2_0() { return cImportanceINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'severity='
		public Keyword getSeverityKeyword_4() { return cSeverityKeyword_4; }
		
		//severity=INT
		public Assignment getSeverityAssignment_5() { return cSeverityAssignment_5; }
		
		//INT
		public RuleCall getSeverityINTTerminalRuleCall_5_0() { return cSeverityINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class TestContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cElementsAlternatives_3_0 = (Alternatives)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsTestContainerParserRuleCall_3_0_0 = (RuleCall)cElementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cElementsTestNodeParserRuleCall_3_0_1 = (RuleCall)cElementsAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////
		//// Test container related.
		////
		//TestContainer:
		//	'container' name=STRING '{'
		//	elements+=(TestContainer | TestNode)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=STRING '{' elements+=(TestContainer | TestNode)* '}'
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=(TestContainer | TestNode)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//(TestContainer | TestNode)
		public Alternatives getElementsAlternatives_3_0() { return cElementsAlternatives_3_0; }
		
		//TestContainer
		public RuleCall getElementsTestContainerParserRuleCall_3_0_0() { return cElementsTestContainerParserRuleCall_3_0_0; }
		
		//TestNode
		public RuleCall getElementsTestNodeParserRuleCall_3_0_1() { return cElementsTestNodeParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DataPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.DataPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntriesDataElementParserRuleCall_4_0 = (RuleCall)cEntriesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////
		//// Data Package related.
		////
		//DataPackage:
		//	'data-package' name=ID description=STRING? '{'
		//	entries+=DataElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'data-package' name=ID description=STRING? '{' entries+=DataElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'data-package'
		public Keyword getDataPackageKeyword_0() { return cDataPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//entries+=DataElement*
		public Assignment getEntriesAssignment_4() { return cEntriesAssignment_4; }
		
		//DataElement
		public RuleCall getEntriesDataElementParserRuleCall_4_0() { return cEntriesDataElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.DataElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeInterfaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataElement:
		//	TypeImport | TypeDef | TypeInterface;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeImport | TypeDef | TypeInterface
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeImport
		public RuleCall getTypeImportParserRuleCall_0() { return cTypeImportParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
		
		//TypeInterface
		public RuleCall getTypeInterfaceParserRuleCall_2() { return cTypeInterfaceParserRuleCall_2; }
	}
	public class TypeImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TypeImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//TypeImport:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeSymbolAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSymbolIDTerminalRuleCall_2_0 = (RuleCall)cTypeSymbolAssignment_2.eContents().get(0);
		
		//// The root must have TypeElements
		//TypeDef:
		//	'def' name=ID typeSymbol=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=ID typeSymbol=ID
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//typeSymbol=ID
		public Assignment getTypeSymbolAssignment_2() { return cTypeSymbolAssignment_2; }
		
		//ID
		public RuleCall getTypeSymbolIDTerminalRuleCall_2_0() { return cTypeSymbolIDTerminalRuleCall_2_0; }
	}
	public class TypeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TypeInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperIDTerminalRuleCall_2_1_0 = (RuleCall)cSuperAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cImportsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cImportsTypeImportParserRuleCall_4_0_0 = (RuleCall)cImportsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cTypeKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRefsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRefsQualifiedNameParserRuleCall_4_1_1_0 = (RuleCall)cRefsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeInterface:
		//	'interface' name=ID ('extends' super=ID)? '{' (imports+=TypeImport | 'type' refs+=QualifiedName)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID ('extends' super=ID)? '{' (imports+=TypeImport | 'type' refs+=QualifiedName)* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' super=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//super=ID
		public Assignment getSuperAssignment_2_1() { return cSuperAssignment_2_1; }
		
		//ID
		public RuleCall getSuperIDTerminalRuleCall_2_1_0() { return cSuperIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(imports+=TypeImport | 'type' refs+=QualifiedName)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//imports+=TypeImport
		public Assignment getImportsAssignment_4_0() { return cImportsAssignment_4_0; }
		
		//TypeImport
		public RuleCall getImportsTypeImportParserRuleCall_4_0_0() { return cImportsTypeImportParserRuleCall_4_0_0; }
		
		//'type' refs+=QualifiedName
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'type'
		public Keyword getTypeKeyword_4_1_0() { return cTypeKeyword_4_1_0; }
		
		//refs+=QualifiedName
		public Assignment getRefsAssignment_4_1_1() { return cRefsAssignment_4_1_1; }
		
		//QualifiedName
		public RuleCall getRefsQualifiedNameParserRuleCall_4_1_1_0() { return cRefsQualifiedNameParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.DataBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataListDataListParserRuleCall_0_0 = (RuleCall)cDataListAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLessThanSignTildeTildeGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignTildeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cStereotypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cTildeGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cViewpointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cViewpointTestViewpointCrossReference_3_0 = (CrossReference)cViewpointAssignment_3.eContents().get(0);
		private final RuleCall cViewpointTestViewpointSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cViewpointTestViewpointCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////
		//// Data Binding related
		////
		//DataBinding:
		//	dataList=DataList ('<~~>' | '<~' stereotype=STEREOTYPE_STRING '~>') '[' viewpoint=[TestViewpoint|STRING] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//dataList=DataList ('<~~>' | '<~' stereotype=STEREOTYPE_STRING '~>') '[' viewpoint=[TestViewpoint|STRING] ']'
		public Group getGroup() { return cGroup; }
		
		//dataList=DataList
		public Assignment getDataListAssignment_0() { return cDataListAssignment_0; }
		
		//DataList
		public RuleCall getDataListDataListParserRuleCall_0_0() { return cDataListDataListParserRuleCall_0_0; }
		
		//'<~~>' | '<~' stereotype=STEREOTYPE_STRING '~>'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'<~~>'
		public Keyword getLessThanSignTildeTildeGreaterThanSignKeyword_1_0() { return cLessThanSignTildeTildeGreaterThanSignKeyword_1_0; }
		
		//'<~' stereotype=STEREOTYPE_STRING '~>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<~'
		public Keyword getLessThanSignTildeKeyword_1_1_0() { return cLessThanSignTildeKeyword_1_1_0; }
		
		//stereotype=STEREOTYPE_STRING
		public Assignment getStereotypeAssignment_1_1_1() { return cStereotypeAssignment_1_1_1; }
		
		//STEREOTYPE_STRING
		public RuleCall getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_1_1_0() { return cStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_1_1_0; }
		
		//'~>'
		public Keyword getTildeGreaterThanSignKeyword_1_1_2() { return cTildeGreaterThanSignKeyword_1_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//viewpoint=[TestViewpoint|STRING]
		public Assignment getViewpointAssignment_3() { return cViewpointAssignment_3; }
		
		//[TestViewpoint|STRING]
		public CrossReference getViewpointTestViewpointCrossReference_3_0() { return cViewpointTestViewpointCrossReference_3_0; }
		
		//STRING
		public RuleCall getViewpointTestViewpointSTRINGTerminalRuleCall_3_0_1() { return cViewpointTestViewpointSTRINGTerminalRuleCall_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class DataListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.DataList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsQualifiedNameParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//DataList:
		//	elements+=QualifiedName (',' elements+=QualifiedName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=QualifiedName (',' elements+=QualifiedName)*
		public Group getGroup() { return cGroup; }
		
		//elements+=QualifiedName
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//QualifiedName
		public RuleCall getElementsQualifiedNameParserRuleCall_0_0() { return cElementsQualifiedNameParserRuleCall_0_0; }
		
		//(',' elements+=QualifiedName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=QualifiedName
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getElementsQualifiedNameParserRuleCall_1_1_0() { return cElementsQualifiedNameParserRuleCall_1_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class STRING_OR_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//STRING_OR_NUMBER:
		//	STRING | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TopLevelImportElements pTopLevelImport;
	private final TestNodeElements pTestNode;
	private final TestTargetElements pTestTarget;
	private final TestViewpointElements pTestViewpoint;
	private final NodeConnectionElements pNodeConnection;
	private final InheritanceElements pInheritance;
	private final RelationElements pRelation;
	private final DependencyElements pDependency;
	private final ChainElements pChain;
	private final TargetChainElements pTargetChain;
	private final NodeChainElements pNodeChain;
	private final StringListElements pStringList;
	private final QualityRiskElements pQualityRisk;
	private final TestContainerElements pTestContainer;
	private final DataPackageElements pDataPackage;
	private final DataElementElements pDataElement;
	private final TypeImportElements pTypeImport;
	private final TypeDefElements pTypeDef;
	private final TypeInterfaceElements pTypeInterface;
	private final DataBindingElements pDataBinding;
	private final DataListElements pDataList;
	private final QualifiedNameElements pQualifiedName;
	private final STRING_OR_NUMBERElements pSTRING_OR_NUMBER;
	private final TerminalRule tESCAPED_TESTTARGET_CHAR;
	private final TerminalRule tTESTTARGET_STRING;
	private final TerminalRule tESCAPED_STEREOTYPE_CHAR;
	private final TerminalRule tSTEREOTYPE_STRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NgtGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTopLevelImport = new TopLevelImportElements();
		this.pTestNode = new TestNodeElements();
		this.pTestTarget = new TestTargetElements();
		this.pTestViewpoint = new TestViewpointElements();
		this.pNodeConnection = new NodeConnectionElements();
		this.pInheritance = new InheritanceElements();
		this.pRelation = new RelationElements();
		this.pDependency = new DependencyElements();
		this.pChain = new ChainElements();
		this.pTargetChain = new TargetChainElements();
		this.pNodeChain = new NodeChainElements();
		this.pStringList = new StringListElements();
		this.pQualityRisk = new QualityRiskElements();
		this.pTestContainer = new TestContainerElements();
		this.pDataPackage = new DataPackageElements();
		this.pDataElement = new DataElementElements();
		this.pTypeImport = new TypeImportElements();
		this.pTypeDef = new TypeDefElements();
		this.pTypeInterface = new TypeInterfaceElements();
		this.pDataBinding = new DataBindingElements();
		this.pDataList = new DataListElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pSTRING_OR_NUMBER = new STRING_OR_NUMBERElements();
		this.tESCAPED_TESTTARGET_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.ESCAPED_TESTTARGET_CHAR");
		this.tTESTTARGET_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TESTTARGET_STRING");
		this.tESCAPED_STEREOTYPE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.ESCAPED_STEREOTYPE_CHAR");
		this.tSTEREOTYPE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.STEREOTYPE_STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.opentestmodeling.vstep.Ngt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	imports+=TopLevelImport* (testElements+=(TestNode | Chain | TestContainer) | dataPackages+=DataPackage |
	//	dataBindings+=DataBinding)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////
	//// Import external models.
	////
	//TopLevelImport:
	//	'import' importURI=STRING;
	public TopLevelImportElements getTopLevelImportAccess() {
		return pTopLevelImport;
	}
	
	public ParserRule getTopLevelImportRule() {
		return getTopLevelImportAccess().getRule();
	}
	
	////
	//// Node related.
	////
	//TestNode:
	//	TestTarget | TestViewpoint;
	public TestNodeElements getTestNodeAccess() {
		return pTestNode;
	}
	
	public ParserRule getTestNodeRule() {
		return getTestNodeAccess().getRule();
	}
	
	//TestTarget:
	//	name=TESTTARGET_STRING stereotype=STEREOTYPE_STRING?;
	public TestTargetElements getTestTargetAccess() {
		return pTestTarget;
	}
	
	public ParserRule getTestTargetRule() {
		return getTestTargetAccess().getRule();
	}
	
	//TestViewpoint:
	//	'[' name=STRING (',' testItems=StringList)? (',' qualityRisk=QualityRisk)? (',' coverage=STRING)? ']'
	//	stereotype=STEREOTYPE_STRING?;
	public TestViewpointElements getTestViewpointAccess() {
		return pTestViewpoint;
	}
	
	public ParserRule getTestViewpointRule() {
		return getTestViewpointAccess().getRule();
	}
	
	//NodeConnection:
	//	Inheritance | Relation | Dependency;
	public NodeConnectionElements getNodeConnectionAccess() {
		return pNodeConnection;
	}
	
	public ParserRule getNodeConnectionRule() {
		return getNodeConnectionAccess().getRule();
	}
	
	//Inheritance:
	//	('<|--' | '<|-' stereotype=STEREOTYPE_STRING '-') '[' (subClass=TestViewpoint | ref=[TestViewpoint|STRING]) ']';
	public InheritanceElements getInheritanceAccess() {
		return pInheritance;
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}
	
	//Relation:
	//	('--' | '-' stereotype=STEREOTYPE_STRING '-') source=TestNode;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Dependency:
	//	('-->' | '-' stereotype=STEREOTYPE_STRING '->') dependsOn=TestNode;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//Chain:
	//	TargetChain | NodeChain;
	public ChainElements getChainAccess() {
		return pChain;
	}
	
	public ParserRule getChainRule() {
		return getChainAccess().getRule();
	}
	
	//TargetChain:
	//	start=TestTarget connections+=Inheritance connections+=NodeConnection*;
	public TargetChainElements getTargetChainAccess() {
		return pTargetChain;
	}
	
	public ParserRule getTargetChainRule() {
		return getTargetChainAccess().getRule();
	}
	
	//NodeChain:
	//	start=TestNode connections+=(Relation | Dependency) connections+=NodeConnection*;
	public NodeChainElements getNodeChainAccess() {
		return pNodeChain;
	}
	
	public ParserRule getNodeChainRule() {
		return getNodeChainAccess().getRule();
	}
	
	//StringList:
	//	{StringList} '[' (elements+=STRING_OR_NUMBER (',' elements+=STRING_OR_NUMBER)*)? ']';
	public StringListElements getStringListAccess() {
		return pStringList;
	}
	
	public ParserRule getStringListRule() {
		return getStringListAccess().getRule();
	}
	
	//QualityRisk:
	//	'[' 'importance=' importance=INT ',' 'severity=' severity=INT ']';
	public QualityRiskElements getQualityRiskAccess() {
		return pQualityRisk;
	}
	
	public ParserRule getQualityRiskRule() {
		return getQualityRiskAccess().getRule();
	}
	
	////
	//// Test container related.
	////
	//TestContainer:
	//	'container' name=STRING '{'
	//	elements+=(TestContainer | TestNode)*
	//	'}';
	public TestContainerElements getTestContainerAccess() {
		return pTestContainer;
	}
	
	public ParserRule getTestContainerRule() {
		return getTestContainerAccess().getRule();
	}
	
	////
	//// Data Package related.
	////
	//DataPackage:
	//	'data-package' name=ID description=STRING? '{'
	//	entries+=DataElement*
	//	'}';
	public DataPackageElements getDataPackageAccess() {
		return pDataPackage;
	}
	
	public ParserRule getDataPackageRule() {
		return getDataPackageAccess().getRule();
	}
	
	//DataElement:
	//	TypeImport | TypeDef | TypeInterface;
	public DataElementElements getDataElementAccess() {
		return pDataElement;
	}
	
	public ParserRule getDataElementRule() {
		return getDataElementAccess().getRule();
	}
	
	//TypeImport:
	//	'import' importURI=STRING;
	public TypeImportElements getTypeImportAccess() {
		return pTypeImport;
	}
	
	public ParserRule getTypeImportRule() {
		return getTypeImportAccess().getRule();
	}
	
	//// The root must have TypeElements
	//TypeDef:
	//	'def' name=ID typeSymbol=ID;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//TypeInterface:
	//	'interface' name=ID ('extends' super=ID)? '{' (imports+=TypeImport | 'type' refs+=QualifiedName)*
	//	'}';
	public TypeInterfaceElements getTypeInterfaceAccess() {
		return pTypeInterface;
	}
	
	public ParserRule getTypeInterfaceRule() {
		return getTypeInterfaceAccess().getRule();
	}
	
	////
	//// Data Binding related
	////
	//DataBinding:
	//	dataList=DataList ('<~~>' | '<~' stereotype=STEREOTYPE_STRING '~>') '[' viewpoint=[TestViewpoint|STRING] ']';
	public DataBindingElements getDataBindingAccess() {
		return pDataBinding;
	}
	
	public ParserRule getDataBindingRule() {
		return getDataBindingAccess().getRule();
	}
	
	//DataList:
	//	elements+=QualifiedName (',' elements+=QualifiedName)*;
	public DataListElements getDataListAccess() {
		return pDataList;
	}
	
	public ParserRule getDataListRule() {
		return getDataListAccess().getRule();
	}
	
	////
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//STRING_OR_NUMBER:
	//	STRING | INT;
	public STRING_OR_NUMBERElements getSTRING_OR_NUMBERAccess() {
		return pSTRING_OR_NUMBER;
	}
	
	public ParserRule getSTRING_OR_NUMBERRule() {
		return getSTRING_OR_NUMBERAccess().getRule();
	}
	
	//terminal fragment ESCAPED_TESTTARGET_CHAR:
	//	'\\' ('n' | 't' | 'r' | '\\' | '(' | ')');
	public TerminalRule getESCAPED_TESTTARGET_CHARRule() {
		return tESCAPED_TESTTARGET_CHAR;
	}
	
	//terminal TESTTARGET_STRING:
	//	'(' (ESCAPED_TESTTARGET_CHAR | !('\\' | '(' | ')'))+ ')';
	public TerminalRule getTESTTARGET_STRINGRule() {
		return tTESTTARGET_STRING;
	}
	
	//terminal fragment ESCAPED_STEREOTYPE_CHAR:
	//	'\\' ('n' | 't' | 'r' | '\\' | '<' | '>');
	public TerminalRule getESCAPED_STEREOTYPE_CHARRule() {
		return tESCAPED_STEREOTYPE_CHAR;
	}
	
	//terminal STEREOTYPE_STRING:
	//	'<<' (ESCAPED_STEREOTYPE_CHAR | !('\\' | '<' | '>'))* '>>';
	public TerminalRule getSTEREOTYPE_STRINGRule() {
		return tSTEREOTYPE_STRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
