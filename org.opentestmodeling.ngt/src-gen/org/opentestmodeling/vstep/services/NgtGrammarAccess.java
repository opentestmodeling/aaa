/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NgtGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Model");
		private final Assignment cTestTargetsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTestTargetsAlternatives_0 = (Alternatives)cTestTargetsAssignment.eContents().get(0);
		private final RuleCall cTestTargetsChainParserRuleCall_0_0 = (RuleCall)cTestTargetsAlternatives_0.eContents().get(0);
		private final RuleCall cTestTargetsTestContainerParserRuleCall_0_1 = (RuleCall)cTestTargetsAlternatives_0.eContents().get(1);
		
		//Model:
		//	testTargets+=(Chain | TestContainer)*;
		@Override public ParserRule getRule() { return rule; }
		
		//testTargets+=(Chain | TestContainer)*
		public Assignment getTestTargetsAssignment() { return cTestTargetsAssignment; }
		
		//(Chain | TestContainer)
		public Alternatives getTestTargetsAlternatives_0() { return cTestTargetsAlternatives_0; }
		
		//Chain
		public RuleCall getTestTargetsChainParserRuleCall_0_0() { return cTestTargetsChainParserRuleCall_0_0; }
		
		//TestContainer
		public RuleCall getTestTargetsTestContainerParserRuleCall_0_1() { return cTestTargetsTestContainerParserRuleCall_0_1; }
	}
	public class TestNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestTargetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestViewpointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		//// Node related.
		////
		//TestNode:
		//	TestTarget | TestViewpoint;
		@Override public ParserRule getRule() { return rule; }
		
		//TestTarget | TestViewpoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestTarget
		public RuleCall getTestTargetParserRuleCall_0() { return cTestTargetParserRuleCall_0; }
		
		//TestViewpoint
		public RuleCall getTestViewpointParserRuleCall_1() { return cTestViewpointParserRuleCall_1; }
	}
	public class TestTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStereotypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStereotypeStereotypeParserRuleCall_3_0 = (RuleCall)cStereotypeAssignment_3.eContents().get(0);
		
		//TestTarget:
		//	'(' name=STRING ')' stereotype=Stereotype?;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=STRING ')' stereotype=Stereotype?
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//stereotype=Stereotype?
		public Assignment getStereotypeAssignment_3() { return cStereotypeAssignment_3; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_3_0() { return cStereotypeStereotypeParserRuleCall_3_0; }
	}
	public class TestViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTestItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTestItemsStringListParserRuleCall_2_1_0 = (RuleCall)cTestItemsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualityRiskAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualityRiskQualityRiskParserRuleCall_3_1_0 = (RuleCall)cQualityRiskAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCoverageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCoverageSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cCoverageAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStereotypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStereotypeStereotypeParserRuleCall_6_0 = (RuleCall)cStereotypeAssignment_6.eContents().get(0);
		
		//TestViewpoint:
		//	'[' name=STRING (',' testItems=StringList?) (',' qualityRisk=QualityRisk?) (',' coverage=STRING?) ']'
		//	stereotype=Stereotype?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' name=STRING (',' testItems=StringList?) (',' qualityRisk=QualityRisk?) (',' coverage=STRING?) ']'
		//stereotype=Stereotype?
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//',' testItems=StringList?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//testItems=StringList?
		public Assignment getTestItemsAssignment_2_1() { return cTestItemsAssignment_2_1; }
		
		//StringList
		public RuleCall getTestItemsStringListParserRuleCall_2_1_0() { return cTestItemsStringListParserRuleCall_2_1_0; }
		
		//',' qualityRisk=QualityRisk?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//qualityRisk=QualityRisk?
		public Assignment getQualityRiskAssignment_3_1() { return cQualityRiskAssignment_3_1; }
		
		//QualityRisk
		public RuleCall getQualityRiskQualityRiskParserRuleCall_3_1_0() { return cQualityRiskQualityRiskParserRuleCall_3_1_0; }
		
		//',' coverage=STRING?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//coverage=STRING?
		public Assignment getCoverageAssignment_4_1() { return cCoverageAssignment_4_1; }
		
		//STRING
		public RuleCall getCoverageSTRINGTerminalRuleCall_4_1_0() { return cCoverageSTRINGTerminalRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//stereotype=Stereotype?
		public Assignment getStereotypeAssignment_6() { return cStereotypeAssignment_6; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_6_0() { return cStereotypeStereotypeParserRuleCall_6_0; }
	}
	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Inheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInheritanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStereotypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStereotypeStereotypeParserRuleCall_2_0 = (RuleCall)cStereotypeAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusVerticalLineGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Inheritance:
		//	{Inheritance} '-' stereotype=Stereotype? '-|>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inheritance} '-' stereotype=Stereotype? '-|>'
		public Group getGroup() { return cGroup; }
		
		//{Inheritance}
		public Action getInheritanceAction_0() { return cInheritanceAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//stereotype=Stereotype?
		public Assignment getStereotypeAssignment_2() { return cStereotypeAssignment_2; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_2_0() { return cStereotypeStereotypeParserRuleCall_2_0; }
		
		//'-|>'
		public Keyword getHyphenMinusVerticalLineGreaterThanSignKeyword_3() { return cHyphenMinusVerticalLineGreaterThanSignKeyword_3; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStereotypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStereotypeStereotypeParserRuleCall_2_0 = (RuleCall)cStereotypeAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Relation:
		//	{Relation} '-' stereotype=Stereotype? '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Relation} '-' stereotype=Stereotype? '-'
		public Group getGroup() { return cGroup; }
		
		//{Relation}
		public Action getRelationAction_0() { return cRelationAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//stereotype=Stereotype?
		public Assignment getStereotypeAssignment_2() { return cStereotypeAssignment_2; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_2_0() { return cStereotypeStereotypeParserRuleCall_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependencyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStereotypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStereotypeStereotypeParserRuleCall_2_0 = (RuleCall)cStereotypeAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dependency:
		//	{Dependency} '-' stereotype=Stereotype? '->';
		@Override public ParserRule getRule() { return rule; }
		
		//{Dependency} '-' stereotype=Stereotype? '->'
		public Group getGroup() { return cGroup; }
		
		//{Dependency}
		public Action getDependencyAction_0() { return cDependencyAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//stereotype=Stereotype?
		public Assignment getStereotypeAssignment_2() { return cStereotypeAssignment_2; }
		
		//Stereotype
		public RuleCall getStereotypeStereotypeParserRuleCall_2_0() { return cStereotypeStereotypeParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
	}
	public class ChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Chain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTestNodeParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsNodeConnectionParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		
		//Chain:
		//	start=TestNode connections+=NodeConnection*;
		@Override public ParserRule getRule() { return rule; }
		
		//start=TestNode connections+=NodeConnection*
		public Group getGroup() { return cGroup; }
		
		//start=TestNode
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//TestNode
		public RuleCall getStartTestNodeParserRuleCall_0_0() { return cStartTestNodeParserRuleCall_0_0; }
		
		//connections+=NodeConnection*
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//NodeConnection
		public RuleCall getConnectionsNodeConnectionParserRuleCall_1_0() { return cConnectionsNodeConnectionParserRuleCall_1_0; }
	}
	public class NodeConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.NodeConnection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTargetConnectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewpointConnectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NodeConnection:
		//	TargetConnection | ViewpointConnection;
		@Override public ParserRule getRule() { return rule; }
		
		//TargetConnection | ViewpointConnection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TargetConnection
		public RuleCall getTargetConnectionParserRuleCall_0() { return cTargetConnectionParserRuleCall_0; }
		
		//ViewpointConnection
		public RuleCall getViewpointConnectionParserRuleCall_1() { return cViewpointConnectionParserRuleCall_1; }
	}
	public class TargetConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TargetConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectorInheritanceParserRuleCall_0_0 = (RuleCall)cConnectorAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetTestTargetParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//TargetConnection:
		//	connector=Inheritance target=TestTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//connector=Inheritance target=TestTarget
		public Group getGroup() { return cGroup; }
		
		//connector=Inheritance
		public Assignment getConnectorAssignment_0() { return cConnectorAssignment_0; }
		
		//Inheritance
		public RuleCall getConnectorInheritanceParserRuleCall_0_0() { return cConnectorInheritanceParserRuleCall_0_0; }
		
		//target=TestTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//TestTarget
		public RuleCall getTargetTestTargetParserRuleCall_1_0() { return cTargetTestTargetParserRuleCall_1_0; }
	}
	public class ViewpointConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.ViewpointConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cConnectorAlternatives_0_0 = (Alternatives)cConnectorAssignment_0.eContents().get(0);
		private final RuleCall cConnectorRelationParserRuleCall_0_0_0 = (RuleCall)cConnectorAlternatives_0_0.eContents().get(0);
		private final RuleCall cConnectorDependencyParserRuleCall_0_0_1 = (RuleCall)cConnectorAlternatives_0_0.eContents().get(1);
		private final RuleCall cConnectorInheritanceParserRuleCall_0_0_2 = (RuleCall)cConnectorAlternatives_0_0.eContents().get(2);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetTestNodeParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//ViewpointConnection:
		//	connector=(Relation | Dependency | Inheritance) target=TestNode;
		@Override public ParserRule getRule() { return rule; }
		
		//connector=(Relation | Dependency | Inheritance) target=TestNode
		public Group getGroup() { return cGroup; }
		
		//connector=(Relation | Dependency | Inheritance)
		public Assignment getConnectorAssignment_0() { return cConnectorAssignment_0; }
		
		//(Relation | Dependency | Inheritance)
		public Alternatives getConnectorAlternatives_0_0() { return cConnectorAlternatives_0_0; }
		
		//Relation
		public RuleCall getConnectorRelationParserRuleCall_0_0_0() { return cConnectorRelationParserRuleCall_0_0_0; }
		
		//Dependency
		public RuleCall getConnectorDependencyParserRuleCall_0_0_1() { return cConnectorDependencyParserRuleCall_0_0_1; }
		
		//Inheritance
		public RuleCall getConnectorInheritanceParserRuleCall_0_0_2() { return cConnectorInheritanceParserRuleCall_0_0_2; }
		
		//target=TestNode
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//TestNode
		public RuleCall getTargetTestNodeParserRuleCall_1_0() { return cTargetTestNodeParserRuleCall_1_0; }
	}
	public class StereotypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.Stereotype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Stereotype:
		//	'<<' name=STRING '>>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<<' name=STRING '>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}
	public class StringListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.StringList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cListSTRING_OR_NUMBERParserRuleCall_1_0_0 = (RuleCall)cListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cListSTRING_OR_NUMBERParserRuleCall_1_1_1_0 = (RuleCall)cListAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StringList:
		//	'[' (list+=STRING_OR_NUMBER ("," list+=STRING_OR_NUMBER)) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (list+=STRING_OR_NUMBER ("," list+=STRING_OR_NUMBER)) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list+=STRING_OR_NUMBER ("," list+=STRING_OR_NUMBER)
		public Group getGroup_1() { return cGroup_1; }
		
		//list+=STRING_OR_NUMBER
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }
		
		//STRING_OR_NUMBER
		public RuleCall getListSTRING_OR_NUMBERParserRuleCall_1_0_0() { return cListSTRING_OR_NUMBERParserRuleCall_1_0_0; }
		
		//"," list+=STRING_OR_NUMBER
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//list+=STRING_OR_NUMBER
		public Assignment getListAssignment_1_1_1() { return cListAssignment_1_1_1; }
		
		//STRING_OR_NUMBER
		public RuleCall getListSTRING_OR_NUMBERParserRuleCall_1_1_1_0() { return cListSTRING_OR_NUMBERParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class QualityRiskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.QualityRisk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSeverityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//QualityRisk:
		//	'importance=' INT ',' 'severity=' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'importance=' INT ',' 'severity=' INT
		public Group getGroup() { return cGroup; }
		
		//'importance='
		public Keyword getImportanceKeyword_0() { return cImportanceKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'severity='
		public Keyword getSeverityKeyword_3() { return cSeverityKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class TestContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cElementsAlternatives_2_1_0 = (Alternatives)cElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cElementsTestContainerParserRuleCall_2_1_0_0 = (RuleCall)cElementsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cElementsTestNodeParserRuleCall_2_1_0_1 = (RuleCall)cElementsAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////
		//// Test container related.
		////
		//TestContainer:
		//	'container' name=STRING ('{'
		//	elements+=(TestContainer | TestNode)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=STRING ('{' elements+=(TestContainer | TestNode)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('{' elements+=(TestContainer | TestNode)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//elements+=(TestContainer | TestNode)*
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//(TestContainer | TestNode)
		public Alternatives getElementsAlternatives_2_1_0() { return cElementsAlternatives_2_1_0; }
		
		//TestContainer
		public RuleCall getElementsTestContainerParserRuleCall_2_1_0_0() { return cElementsTestContainerParserRuleCall_2_1_0_0; }
		
		//TestNode
		public RuleCall getElementsTestNodeParserRuleCall_2_1_0_1() { return cElementsTestNodeParserRuleCall_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class ContainerConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.ContainerConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cConnectorAlternatives_0_0 = (Alternatives)cConnectorAssignment_0.eContents().get(0);
		private final RuleCall cConnectorRelationParserRuleCall_0_0_0 = (RuleCall)cConnectorAlternatives_0_0.eContents().get(0);
		private final RuleCall cConnectorDependencyParserRuleCall_0_0_1 = (RuleCall)cConnectorAlternatives_0_0.eContents().get(1);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetTestContainerParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//ContainerConnection:
		//	connector=(Relation | Dependency) target=TestContainer;
		@Override public ParserRule getRule() { return rule; }
		
		//connector=(Relation | Dependency) target=TestContainer
		public Group getGroup() { return cGroup; }
		
		//connector=(Relation | Dependency)
		public Assignment getConnectorAssignment_0() { return cConnectorAssignment_0; }
		
		//(Relation | Dependency)
		public Alternatives getConnectorAlternatives_0_0() { return cConnectorAlternatives_0_0; }
		
		//Relation
		public RuleCall getConnectorRelationParserRuleCall_0_0_0() { return cConnectorRelationParserRuleCall_0_0_0; }
		
		//Dependency
		public RuleCall getConnectorDependencyParserRuleCall_0_0_1() { return cConnectorDependencyParserRuleCall_0_0_1; }
		
		//target=TestContainer
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//TestContainer
		public RuleCall getTargetTestContainerParserRuleCall_1_0() { return cTargetTestContainerParserRuleCall_1_0; }
	}
	public class TestContainerChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.TestContainerChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTestContainerParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsContainerConnectionParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		
		//TestContainerChain:
		//	start=TestContainer connections+=ContainerConnection*;
		@Override public ParserRule getRule() { return rule; }
		
		//start=TestContainer connections+=ContainerConnection*
		public Group getGroup() { return cGroup; }
		
		//start=TestContainer
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//TestContainer
		public RuleCall getStartTestContainerParserRuleCall_0_0() { return cStartTestContainerParserRuleCall_0_0; }
		
		//connections+=ContainerConnection*
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//ContainerConnection
		public RuleCall getConnectionsContainerConnectionParserRuleCall_1_0() { return cConnectionsContainerConnectionParserRuleCall_1_0; }
	}
	public class STRING_OR_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.opentestmodeling.vstep.Ngt.STRING_OR_NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//STRING_OR_NUMBER:
		//	STRING | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TestNodeElements pTestNode;
	private final TestTargetElements pTestTarget;
	private final TestViewpointElements pTestViewpoint;
	private final InheritanceElements pInheritance;
	private final RelationElements pRelation;
	private final DependencyElements pDependency;
	private final ChainElements pChain;
	private final NodeConnectionElements pNodeConnection;
	private final TargetConnectionElements pTargetConnection;
	private final ViewpointConnectionElements pViewpointConnection;
	private final StereotypeElements pStereotype;
	private final StringListElements pStringList;
	private final QualityRiskElements pQualityRisk;
	private final TestContainerElements pTestContainer;
	private final ContainerConnectionElements pContainerConnection;
	private final TestContainerChainElements pTestContainerChain;
	private final STRING_OR_NUMBERElements pSTRING_OR_NUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NgtGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTestNode = new TestNodeElements();
		this.pTestTarget = new TestTargetElements();
		this.pTestViewpoint = new TestViewpointElements();
		this.pInheritance = new InheritanceElements();
		this.pRelation = new RelationElements();
		this.pDependency = new DependencyElements();
		this.pChain = new ChainElements();
		this.pNodeConnection = new NodeConnectionElements();
		this.pTargetConnection = new TargetConnectionElements();
		this.pViewpointConnection = new ViewpointConnectionElements();
		this.pStereotype = new StereotypeElements();
		this.pStringList = new StringListElements();
		this.pQualityRisk = new QualityRiskElements();
		this.pTestContainer = new TestContainerElements();
		this.pContainerConnection = new ContainerConnectionElements();
		this.pTestContainerChain = new TestContainerChainElements();
		this.pSTRING_OR_NUMBER = new STRING_OR_NUMBERElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.opentestmodeling.vstep.Ngt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	testTargets+=(Chain | TestContainer)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////
	//// Node related.
	////
	//TestNode:
	//	TestTarget | TestViewpoint;
	public TestNodeElements getTestNodeAccess() {
		return pTestNode;
	}
	
	public ParserRule getTestNodeRule() {
		return getTestNodeAccess().getRule();
	}
	
	//TestTarget:
	//	'(' name=STRING ')' stereotype=Stereotype?;
	public TestTargetElements getTestTargetAccess() {
		return pTestTarget;
	}
	
	public ParserRule getTestTargetRule() {
		return getTestTargetAccess().getRule();
	}
	
	//TestViewpoint:
	//	'[' name=STRING (',' testItems=StringList?) (',' qualityRisk=QualityRisk?) (',' coverage=STRING?) ']'
	//	stereotype=Stereotype?;
	public TestViewpointElements getTestViewpointAccess() {
		return pTestViewpoint;
	}
	
	public ParserRule getTestViewpointRule() {
		return getTestViewpointAccess().getRule();
	}
	
	//Inheritance:
	//	{Inheritance} '-' stereotype=Stereotype? '-|>';
	public InheritanceElements getInheritanceAccess() {
		return pInheritance;
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}
	
	//Relation:
	//	{Relation} '-' stereotype=Stereotype? '-';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Dependency:
	//	{Dependency} '-' stereotype=Stereotype? '->';
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//Chain:
	//	start=TestNode connections+=NodeConnection*;
	public ChainElements getChainAccess() {
		return pChain;
	}
	
	public ParserRule getChainRule() {
		return getChainAccess().getRule();
	}
	
	//NodeConnection:
	//	TargetConnection | ViewpointConnection;
	public NodeConnectionElements getNodeConnectionAccess() {
		return pNodeConnection;
	}
	
	public ParserRule getNodeConnectionRule() {
		return getNodeConnectionAccess().getRule();
	}
	
	//TargetConnection:
	//	connector=Inheritance target=TestTarget;
	public TargetConnectionElements getTargetConnectionAccess() {
		return pTargetConnection;
	}
	
	public ParserRule getTargetConnectionRule() {
		return getTargetConnectionAccess().getRule();
	}
	
	//ViewpointConnection:
	//	connector=(Relation | Dependency | Inheritance) target=TestNode;
	public ViewpointConnectionElements getViewpointConnectionAccess() {
		return pViewpointConnection;
	}
	
	public ParserRule getViewpointConnectionRule() {
		return getViewpointConnectionAccess().getRule();
	}
	
	//Stereotype:
	//	'<<' name=STRING '>>';
	public StereotypeElements getStereotypeAccess() {
		return pStereotype;
	}
	
	public ParserRule getStereotypeRule() {
		return getStereotypeAccess().getRule();
	}
	
	//StringList:
	//	'[' (list+=STRING_OR_NUMBER ("," list+=STRING_OR_NUMBER)) ']';
	public StringListElements getStringListAccess() {
		return pStringList;
	}
	
	public ParserRule getStringListRule() {
		return getStringListAccess().getRule();
	}
	
	//QualityRisk:
	//	'importance=' INT ',' 'severity=' INT;
	public QualityRiskElements getQualityRiskAccess() {
		return pQualityRisk;
	}
	
	public ParserRule getQualityRiskRule() {
		return getQualityRiskAccess().getRule();
	}
	
	////
	//// Test container related.
	////
	//TestContainer:
	//	'container' name=STRING ('{'
	//	elements+=(TestContainer | TestNode)*
	//	'}')?;
	public TestContainerElements getTestContainerAccess() {
		return pTestContainer;
	}
	
	public ParserRule getTestContainerRule() {
		return getTestContainerAccess().getRule();
	}
	
	//ContainerConnection:
	//	connector=(Relation | Dependency) target=TestContainer;
	public ContainerConnectionElements getContainerConnectionAccess() {
		return pContainerConnection;
	}
	
	public ParserRule getContainerConnectionRule() {
		return getContainerConnectionAccess().getRule();
	}
	
	//TestContainerChain:
	//	start=TestContainer connections+=ContainerConnection*;
	public TestContainerChainElements getTestContainerChainAccess() {
		return pTestContainerChain;
	}
	
	public ParserRule getTestContainerChainRule() {
		return getTestContainerChainAccess().getRule();
	}
	
	//STRING_OR_NUMBER:
	//	STRING | INT;
	public STRING_OR_NUMBERElements getSTRING_OR_NUMBERAccess() {
		return pSTRING_OR_NUMBER;
	}
	
	public ParserRule getSTRING_OR_NUMBERRule() {
		return getSTRING_OR_NUMBERAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
