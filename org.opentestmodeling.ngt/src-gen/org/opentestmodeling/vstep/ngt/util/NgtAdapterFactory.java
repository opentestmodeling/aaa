/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.opentestmodeling.vstep.ngt.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.opentestmodeling.vstep.ngt.NgtPackage
 * @generated
 */
public class NgtAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NgtPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NgtAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = NgtPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NgtSwitch<Adapter> modelSwitch =
    new NgtSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseTestNode(TestNode object)
      {
        return createTestNodeAdapter();
      }
      @Override
      public Adapter caseTestTarget(TestTarget object)
      {
        return createTestTargetAdapter();
      }
      @Override
      public Adapter caseTestViewpoint(TestViewpoint object)
      {
        return createTestViewpointAdapter();
      }
      @Override
      public Adapter caseNodeConnection(NodeConnection object)
      {
        return createNodeConnectionAdapter();
      }
      @Override
      public Adapter caseInheritance(Inheritance object)
      {
        return createInheritanceAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseDependency(Dependency object)
      {
        return createDependencyAdapter();
      }
      @Override
      public Adapter caseChain(Chain object)
      {
        return createChainAdapter();
      }
      @Override
      public Adapter caseTargetChain(TargetChain object)
      {
        return createTargetChainAdapter();
      }
      @Override
      public Adapter caseNodeChain(NodeChain object)
      {
        return createNodeChainAdapter();
      }
      @Override
      public Adapter caseStringList(StringList object)
      {
        return createStringListAdapter();
      }
      @Override
      public Adapter caseQualityRisk(QualityRisk object)
      {
        return createQualityRiskAdapter();
      }
      @Override
      public Adapter caseTestContainer(TestContainer object)
      {
        return createTestContainerAdapter();
      }
      @Override
      public Adapter caseContainerConnection(ContainerConnection object)
      {
        return createContainerConnectionAdapter();
      }
      @Override
      public Adapter caseTestContainerChain(TestContainerChain object)
      {
        return createTestContainerChainAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TestNode <em>Test Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TestNode
   * @generated
   */
  public Adapter createTestNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TestTarget <em>Test Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TestTarget
   * @generated
   */
  public Adapter createTestTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TestViewpoint <em>Test Viewpoint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TestViewpoint
   * @generated
   */
  public Adapter createTestViewpointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.NodeConnection <em>Node Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.NodeConnection
   * @generated
   */
  public Adapter createNodeConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.Inheritance <em>Inheritance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.Inheritance
   * @generated
   */
  public Adapter createInheritanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.Dependency <em>Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.Dependency
   * @generated
   */
  public Adapter createDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.Chain <em>Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.Chain
   * @generated
   */
  public Adapter createChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TargetChain <em>Target Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TargetChain
   * @generated
   */
  public Adapter createTargetChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.NodeChain <em>Node Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.NodeChain
   * @generated
   */
  public Adapter createNodeChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.StringList <em>String List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.StringList
   * @generated
   */
  public Adapter createStringListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.QualityRisk <em>Quality Risk</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.QualityRisk
   * @generated
   */
  public Adapter createQualityRiskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TestContainer <em>Test Container</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TestContainer
   * @generated
   */
  public Adapter createTestContainerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.ContainerConnection <em>Container Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.ContainerConnection
   * @generated
   */
  public Adapter createContainerConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.TestContainerChain <em>Test Container Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.opentestmodeling.vstep.ngt.TestContainerChain
   * @generated
   */
  public Adapter createTestContainerChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //NgtAdapterFactory
