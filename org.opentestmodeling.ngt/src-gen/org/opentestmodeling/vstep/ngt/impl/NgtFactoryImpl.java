/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.opentestmodeling.vstep.ngt.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NgtFactoryImpl extends EFactoryImpl implements NgtFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NgtFactory init()
  {
    try
    {
      NgtFactory theNgtFactory = (NgtFactory)EPackage.Registry.INSTANCE.getEFactory(NgtPackage.eNS_URI);
      if (theNgtFactory != null)
      {
        return theNgtFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NgtFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NgtFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NgtPackage.MODEL: return createModel();
      case NgtPackage.TEST_NODE: return createTestNode();
      case NgtPackage.TEST_TARGET: return createTestTarget();
      case NgtPackage.TEST_VIEWPOINT: return createTestViewpoint();
      case NgtPackage.INHERITANCE: return createInheritance();
      case NgtPackage.RELATION: return createRelation();
      case NgtPackage.DEPENDENCY: return createDependency();
      case NgtPackage.CHAIN: return createChain();
      case NgtPackage.NODE_CONNECTION: return createNodeConnection();
      case NgtPackage.TARGET_CONNECTION: return createTargetConnection();
      case NgtPackage.VIEWPOINT_CONNECTION: return createViewpointConnection();
      case NgtPackage.STEREOTYPE: return createStereotype();
      case NgtPackage.STRING_LIST: return createStringList();
      case NgtPackage.TEST_CONTAINER: return createTestContainer();
      case NgtPackage.CONTAINER_CONNECTION: return createContainerConnection();
      case NgtPackage.TEST_CONTAINER_CHAIN: return createTestContainerChain();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestNode createTestNode()
  {
    TestNodeImpl testNode = new TestNodeImpl();
    return testNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestTarget createTestTarget()
  {
    TestTargetImpl testTarget = new TestTargetImpl();
    return testTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestViewpoint createTestViewpoint()
  {
    TestViewpointImpl testViewpoint = new TestViewpointImpl();
    return testViewpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Inheritance createInheritance()
  {
    InheritanceImpl inheritance = new InheritanceImpl();
    return inheritance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Chain createChain()
  {
    ChainImpl chain = new ChainImpl();
    return chain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeConnection createNodeConnection()
  {
    NodeConnectionImpl nodeConnection = new NodeConnectionImpl();
    return nodeConnection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TargetConnection createTargetConnection()
  {
    TargetConnectionImpl targetConnection = new TargetConnectionImpl();
    return targetConnection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ViewpointConnection createViewpointConnection()
  {
    ViewpointConnectionImpl viewpointConnection = new ViewpointConnectionImpl();
    return viewpointConnection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stereotype createStereotype()
  {
    StereotypeImpl stereotype = new StereotypeImpl();
    return stereotype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringList createStringList()
  {
    StringListImpl stringList = new StringListImpl();
    return stringList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestContainer createTestContainer()
  {
    TestContainerImpl testContainer = new TestContainerImpl();
    return testContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerConnection createContainerConnection()
  {
    ContainerConnectionImpl containerConnection = new ContainerConnectionImpl();
    return containerConnection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestContainerChain createTestContainerChain()
  {
    TestContainerChainImpl testContainerChain = new TestContainerChainImpl();
    return testContainerChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NgtPackage getNgtPackage()
  {
    return (NgtPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NgtPackage getPackage()
  {
    return NgtPackage.eINSTANCE;
  }

} //NgtFactoryImpl
