/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.opentestmodeling.vstep.ngt.DataBinding;
import org.opentestmodeling.vstep.ngt.DataPackage;
import org.opentestmodeling.vstep.ngt.Model;
import org.opentestmodeling.vstep.ngt.NgtPackage;
import org.opentestmodeling.vstep.ngt.TopLevelImport;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.ModelImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.ModelImpl#getTestElements <em>Test Elements</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.ModelImpl#getDataPackages <em>Data Packages</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.ModelImpl#getDataBindings <em>Data Bindings</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<TopLevelImport> imports;

  /**
   * The cached value of the '{@link #getTestElements() <em>Test Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestElements()
   * @generated
   * @ordered
   */
  protected EList<EObject> testElements;

  /**
   * The cached value of the '{@link #getDataPackages() <em>Data Packages</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataPackages()
   * @generated
   * @ordered
   */
  protected EList<DataPackage> dataPackages;

  /**
   * The cached value of the '{@link #getDataBindings() <em>Data Bindings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataBindings()
   * @generated
   * @ordered
   */
  protected EList<DataBinding> dataBindings;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NgtPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TopLevelImport> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<TopLevelImport>(TopLevelImport.class, this, NgtPackage.MODEL__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getTestElements()
  {
    if (testElements == null)
    {
      testElements = new EObjectContainmentEList<EObject>(EObject.class, this, NgtPackage.MODEL__TEST_ELEMENTS);
    }
    return testElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DataPackage> getDataPackages()
  {
    if (dataPackages == null)
    {
      dataPackages = new EObjectContainmentEList<DataPackage>(DataPackage.class, this, NgtPackage.MODEL__DATA_PACKAGES);
    }
    return dataPackages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DataBinding> getDataBindings()
  {
    if (dataBindings == null)
    {
      dataBindings = new EObjectContainmentEList<DataBinding>(DataBinding.class, this, NgtPackage.MODEL__DATA_BINDINGS);
    }
    return dataBindings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NgtPackage.MODEL__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case NgtPackage.MODEL__TEST_ELEMENTS:
        return ((InternalEList<?>)getTestElements()).basicRemove(otherEnd, msgs);
      case NgtPackage.MODEL__DATA_PACKAGES:
        return ((InternalEList<?>)getDataPackages()).basicRemove(otherEnd, msgs);
      case NgtPackage.MODEL__DATA_BINDINGS:
        return ((InternalEList<?>)getDataBindings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NgtPackage.MODEL__IMPORTS:
        return getImports();
      case NgtPackage.MODEL__TEST_ELEMENTS:
        return getTestElements();
      case NgtPackage.MODEL__DATA_PACKAGES:
        return getDataPackages();
      case NgtPackage.MODEL__DATA_BINDINGS:
        return getDataBindings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NgtPackage.MODEL__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends TopLevelImport>)newValue);
        return;
      case NgtPackage.MODEL__TEST_ELEMENTS:
        getTestElements().clear();
        getTestElements().addAll((Collection<? extends EObject>)newValue);
        return;
      case NgtPackage.MODEL__DATA_PACKAGES:
        getDataPackages().clear();
        getDataPackages().addAll((Collection<? extends DataPackage>)newValue);
        return;
      case NgtPackage.MODEL__DATA_BINDINGS:
        getDataBindings().clear();
        getDataBindings().addAll((Collection<? extends DataBinding>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.MODEL__IMPORTS:
        getImports().clear();
        return;
      case NgtPackage.MODEL__TEST_ELEMENTS:
        getTestElements().clear();
        return;
      case NgtPackage.MODEL__DATA_PACKAGES:
        getDataPackages().clear();
        return;
      case NgtPackage.MODEL__DATA_BINDINGS:
        getDataBindings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.MODEL__IMPORTS:
        return imports != null && !imports.isEmpty();
      case NgtPackage.MODEL__TEST_ELEMENTS:
        return testElements != null && !testElements.isEmpty();
      case NgtPackage.MODEL__DATA_PACKAGES:
        return dataPackages != null && !dataPackages.isEmpty();
      case NgtPackage.MODEL__DATA_BINDINGS:
        return dataBindings != null && !dataBindings.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
