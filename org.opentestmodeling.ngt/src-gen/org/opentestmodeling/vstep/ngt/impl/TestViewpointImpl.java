/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.opentestmodeling.vstep.ngt.NgtPackage;
import org.opentestmodeling.vstep.ngt.QualityRisk;
import org.opentestmodeling.vstep.ngt.StringList;
import org.opentestmodeling.vstep.ngt.TestViewpoint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Viewpoint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.TestViewpointImpl#getTestItems <em>Test Items</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.TestViewpointImpl#getQualityRisk <em>Quality Risk</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.TestViewpointImpl#getCoverage <em>Coverage</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestViewpointImpl extends TestNodeImpl implements TestViewpoint
{
  /**
   * The cached value of the '{@link #getTestItems() <em>Test Items</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestItems()
   * @generated
   * @ordered
   */
  protected StringList testItems;

  /**
   * The cached value of the '{@link #getQualityRisk() <em>Quality Risk</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualityRisk()
   * @generated
   * @ordered
   */
  protected QualityRisk qualityRisk;

  /**
   * The default value of the '{@link #getCoverage() <em>Coverage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoverage()
   * @generated
   * @ordered
   */
  protected static final String COVERAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCoverage() <em>Coverage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoverage()
   * @generated
   * @ordered
   */
  protected String coverage = COVERAGE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestViewpointImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NgtPackage.Literals.TEST_VIEWPOINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringList getTestItems()
  {
    return testItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTestItems(StringList newTestItems, NotificationChain msgs)
  {
    StringList oldTestItems = testItems;
    testItems = newTestItems;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NgtPackage.TEST_VIEWPOINT__TEST_ITEMS, oldTestItems, newTestItems);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTestItems(StringList newTestItems)
  {
    if (newTestItems != testItems)
    {
      NotificationChain msgs = null;
      if (testItems != null)
        msgs = ((InternalEObject)testItems).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NgtPackage.TEST_VIEWPOINT__TEST_ITEMS, null, msgs);
      if (newTestItems != null)
        msgs = ((InternalEObject)newTestItems).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NgtPackage.TEST_VIEWPOINT__TEST_ITEMS, null, msgs);
      msgs = basicSetTestItems(newTestItems, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.TEST_VIEWPOINT__TEST_ITEMS, newTestItems, newTestItems));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualityRisk getQualityRisk()
  {
    return qualityRisk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQualityRisk(QualityRisk newQualityRisk, NotificationChain msgs)
  {
    QualityRisk oldQualityRisk = qualityRisk;
    qualityRisk = newQualityRisk;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NgtPackage.TEST_VIEWPOINT__QUALITY_RISK, oldQualityRisk, newQualityRisk);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQualityRisk(QualityRisk newQualityRisk)
  {
    if (newQualityRisk != qualityRisk)
    {
      NotificationChain msgs = null;
      if (qualityRisk != null)
        msgs = ((InternalEObject)qualityRisk).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NgtPackage.TEST_VIEWPOINT__QUALITY_RISK, null, msgs);
      if (newQualityRisk != null)
        msgs = ((InternalEObject)newQualityRisk).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NgtPackage.TEST_VIEWPOINT__QUALITY_RISK, null, msgs);
      msgs = basicSetQualityRisk(newQualityRisk, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.TEST_VIEWPOINT__QUALITY_RISK, newQualityRisk, newQualityRisk));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCoverage()
  {
    return coverage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCoverage(String newCoverage)
  {
    String oldCoverage = coverage;
    coverage = newCoverage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.TEST_VIEWPOINT__COVERAGE, oldCoverage, coverage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NgtPackage.TEST_VIEWPOINT__TEST_ITEMS:
        return basicSetTestItems(null, msgs);
      case NgtPackage.TEST_VIEWPOINT__QUALITY_RISK:
        return basicSetQualityRisk(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NgtPackage.TEST_VIEWPOINT__TEST_ITEMS:
        return getTestItems();
      case NgtPackage.TEST_VIEWPOINT__QUALITY_RISK:
        return getQualityRisk();
      case NgtPackage.TEST_VIEWPOINT__COVERAGE:
        return getCoverage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NgtPackage.TEST_VIEWPOINT__TEST_ITEMS:
        setTestItems((StringList)newValue);
        return;
      case NgtPackage.TEST_VIEWPOINT__QUALITY_RISK:
        setQualityRisk((QualityRisk)newValue);
        return;
      case NgtPackage.TEST_VIEWPOINT__COVERAGE:
        setCoverage((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.TEST_VIEWPOINT__TEST_ITEMS:
        setTestItems((StringList)null);
        return;
      case NgtPackage.TEST_VIEWPOINT__QUALITY_RISK:
        setQualityRisk((QualityRisk)null);
        return;
      case NgtPackage.TEST_VIEWPOINT__COVERAGE:
        setCoverage(COVERAGE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.TEST_VIEWPOINT__TEST_ITEMS:
        return testItems != null;
      case NgtPackage.TEST_VIEWPOINT__QUALITY_RISK:
        return qualityRisk != null;
      case NgtPackage.TEST_VIEWPOINT__COVERAGE:
        return COVERAGE_EDEFAULT == null ? coverage != null : !COVERAGE_EDEFAULT.equals(coverage);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (coverage: ");
    result.append(coverage);
    result.append(')');
    return result.toString();
  }

} //TestViewpointImpl
