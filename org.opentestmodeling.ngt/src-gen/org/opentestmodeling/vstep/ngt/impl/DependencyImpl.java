/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.opentestmodeling.vstep.ngt.Dependency;
import org.opentestmodeling.vstep.ngt.NgtPackage;
import org.opentestmodeling.vstep.ngt.TestNode;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dependency</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.DependencyImpl#getDependsOn <em>Depends On</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DependencyImpl extends NodeConnectionImpl implements Dependency
{
  /**
   * The cached value of the '{@link #getDependsOn() <em>Depends On</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependsOn()
   * @generated
   * @ordered
   */
  protected TestNode dependsOn;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependencyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NgtPackage.Literals.DEPENDENCY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestNode getDependsOn()
  {
    return dependsOn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDependsOn(TestNode newDependsOn, NotificationChain msgs)
  {
    TestNode oldDependsOn = dependsOn;
    dependsOn = newDependsOn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NgtPackage.DEPENDENCY__DEPENDS_ON, oldDependsOn, newDependsOn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDependsOn(TestNode newDependsOn)
  {
    if (newDependsOn != dependsOn)
    {
      NotificationChain msgs = null;
      if (dependsOn != null)
        msgs = ((InternalEObject)dependsOn).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NgtPackage.DEPENDENCY__DEPENDS_ON, null, msgs);
      if (newDependsOn != null)
        msgs = ((InternalEObject)newDependsOn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NgtPackage.DEPENDENCY__DEPENDS_ON, null, msgs);
      msgs = basicSetDependsOn(newDependsOn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.DEPENDENCY__DEPENDS_ON, newDependsOn, newDependsOn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NgtPackage.DEPENDENCY__DEPENDS_ON:
        return basicSetDependsOn(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NgtPackage.DEPENDENCY__DEPENDS_ON:
        return getDependsOn();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NgtPackage.DEPENDENCY__DEPENDS_ON:
        setDependsOn((TestNode)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.DEPENDENCY__DEPENDS_ON:
        setDependsOn((TestNode)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.DEPENDENCY__DEPENDS_ON:
        return dependsOn != null;
    }
    return super.eIsSet(featureID);
  }

} //DependencyImpl
