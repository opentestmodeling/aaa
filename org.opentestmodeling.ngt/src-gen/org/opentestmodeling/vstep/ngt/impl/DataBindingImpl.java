/**
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.opentestmodeling.vstep.ngt.DataBinding;
import org.opentestmodeling.vstep.ngt.DataList;
import org.opentestmodeling.vstep.ngt.NgtPackage;
import org.opentestmodeling.vstep.ngt.TestViewpoint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Binding</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.DataBindingImpl#getDataList <em>Data List</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.DataBindingImpl#getStereotype <em>Stereotype</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.impl.DataBindingImpl#getViewpoint <em>Viewpoint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataBindingImpl extends MinimalEObjectImpl.Container implements DataBinding
{
  /**
   * The cached value of the '{@link #getDataList() <em>Data List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataList()
   * @generated
   * @ordered
   */
  protected DataList dataList;

  /**
   * The default value of the '{@link #getStereotype() <em>Stereotype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStereotype()
   * @generated
   * @ordered
   */
  protected static final String STEREOTYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStereotype() <em>Stereotype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStereotype()
   * @generated
   * @ordered
   */
  protected String stereotype = STEREOTYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getViewpoint() <em>Viewpoint</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewpoint()
   * @generated
   * @ordered
   */
  protected TestViewpoint viewpoint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataBindingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NgtPackage.Literals.DATA_BINDING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataList getDataList()
  {
    return dataList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDataList(DataList newDataList, NotificationChain msgs)
  {
    DataList oldDataList = dataList;
    dataList = newDataList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NgtPackage.DATA_BINDING__DATA_LIST, oldDataList, newDataList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDataList(DataList newDataList)
  {
    if (newDataList != dataList)
    {
      NotificationChain msgs = null;
      if (dataList != null)
        msgs = ((InternalEObject)dataList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NgtPackage.DATA_BINDING__DATA_LIST, null, msgs);
      if (newDataList != null)
        msgs = ((InternalEObject)newDataList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NgtPackage.DATA_BINDING__DATA_LIST, null, msgs);
      msgs = basicSetDataList(newDataList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.DATA_BINDING__DATA_LIST, newDataList, newDataList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStereotype()
  {
    return stereotype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStereotype(String newStereotype)
  {
    String oldStereotype = stereotype;
    stereotype = newStereotype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.DATA_BINDING__STEREOTYPE, oldStereotype, stereotype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestViewpoint getViewpoint()
  {
    if (viewpoint != null && viewpoint.eIsProxy())
    {
      InternalEObject oldViewpoint = (InternalEObject)viewpoint;
      viewpoint = (TestViewpoint)eResolveProxy(oldViewpoint);
      if (viewpoint != oldViewpoint)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NgtPackage.DATA_BINDING__VIEWPOINT, oldViewpoint, viewpoint));
      }
    }
    return viewpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestViewpoint basicGetViewpoint()
  {
    return viewpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setViewpoint(TestViewpoint newViewpoint)
  {
    TestViewpoint oldViewpoint = viewpoint;
    viewpoint = newViewpoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NgtPackage.DATA_BINDING__VIEWPOINT, oldViewpoint, viewpoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NgtPackage.DATA_BINDING__DATA_LIST:
        return basicSetDataList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NgtPackage.DATA_BINDING__DATA_LIST:
        return getDataList();
      case NgtPackage.DATA_BINDING__STEREOTYPE:
        return getStereotype();
      case NgtPackage.DATA_BINDING__VIEWPOINT:
        if (resolve) return getViewpoint();
        return basicGetViewpoint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NgtPackage.DATA_BINDING__DATA_LIST:
        setDataList((DataList)newValue);
        return;
      case NgtPackage.DATA_BINDING__STEREOTYPE:
        setStereotype((String)newValue);
        return;
      case NgtPackage.DATA_BINDING__VIEWPOINT:
        setViewpoint((TestViewpoint)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.DATA_BINDING__DATA_LIST:
        setDataList((DataList)null);
        return;
      case NgtPackage.DATA_BINDING__STEREOTYPE:
        setStereotype(STEREOTYPE_EDEFAULT);
        return;
      case NgtPackage.DATA_BINDING__VIEWPOINT:
        setViewpoint((TestViewpoint)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NgtPackage.DATA_BINDING__DATA_LIST:
        return dataList != null;
      case NgtPackage.DATA_BINDING__STEREOTYPE:
        return STEREOTYPE_EDEFAULT == null ? stereotype != null : !STEREOTYPE_EDEFAULT.equals(stereotype);
      case NgtPackage.DATA_BINDING__VIEWPOINT:
        return viewpoint != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (stereotype: ");
    result.append(stereotype);
    result.append(')');
    return result.toString();
  }

} //DataBindingImpl
