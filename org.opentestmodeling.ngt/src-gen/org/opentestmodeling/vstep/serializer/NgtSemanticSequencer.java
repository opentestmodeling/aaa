/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.opentestmodeling.vstep.ngt.Chain;
import org.opentestmodeling.vstep.ngt.ContainerConnection;
import org.opentestmodeling.vstep.ngt.Dependency;
import org.opentestmodeling.vstep.ngt.Inheritance;
import org.opentestmodeling.vstep.ngt.Model;
import org.opentestmodeling.vstep.ngt.NgtPackage;
import org.opentestmodeling.vstep.ngt.Relation;
import org.opentestmodeling.vstep.ngt.Stereotype;
import org.opentestmodeling.vstep.ngt.StringList;
import org.opentestmodeling.vstep.ngt.TargetConnection;
import org.opentestmodeling.vstep.ngt.TestContainer;
import org.opentestmodeling.vstep.ngt.TestContainerChain;
import org.opentestmodeling.vstep.ngt.TestTarget;
import org.opentestmodeling.vstep.ngt.TestViewpoint;
import org.opentestmodeling.vstep.ngt.ViewpointConnection;
import org.opentestmodeling.vstep.services.NgtGrammarAccess;

@SuppressWarnings("all")
public class NgtSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NgtGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NgtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NgtPackage.CHAIN:
				sequence_Chain(context, (Chain) semanticObject); 
				return; 
			case NgtPackage.CONTAINER_CONNECTION:
				sequence_ContainerConnection(context, (ContainerConnection) semanticObject); 
				return; 
			case NgtPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case NgtPackage.INHERITANCE:
				sequence_Inheritance(context, (Inheritance) semanticObject); 
				return; 
			case NgtPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case NgtPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case NgtPackage.STEREOTYPE:
				sequence_Stereotype(context, (Stereotype) semanticObject); 
				return; 
			case NgtPackage.STRING_LIST:
				sequence_StringList(context, (StringList) semanticObject); 
				return; 
			case NgtPackage.TARGET_CONNECTION:
				sequence_TargetConnection(context, (TargetConnection) semanticObject); 
				return; 
			case NgtPackage.TEST_CONTAINER:
				sequence_TestContainer(context, (TestContainer) semanticObject); 
				return; 
			case NgtPackage.TEST_CONTAINER_CHAIN:
				sequence_TestContainerChain(context, (TestContainerChain) semanticObject); 
				return; 
			case NgtPackage.TEST_TARGET:
				sequence_TestTarget(context, (TestTarget) semanticObject); 
				return; 
			case NgtPackage.TEST_VIEWPOINT:
				sequence_TestViewpoint(context, (TestViewpoint) semanticObject); 
				return; 
			case NgtPackage.VIEWPOINT_CONNECTION:
				sequence_ViewpointConnection(context, (ViewpointConnection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Chain returns Chain
	 *
	 * Constraint:
	 *     (start=TestNode connections+=NodeConnection*)
	 */
	protected void sequence_Chain(ISerializationContext context, Chain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerConnection returns ContainerConnection
	 *
	 * Constraint:
	 *     ((connector=Relation | connector=Dependency) target=TestContainer)
	 */
	protected void sequence_ContainerConnection(ISerializationContext context, ContainerConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     stereotype=Stereotype?
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inheritance returns Inheritance
	 *
	 * Constraint:
	 *     stereotype=Stereotype?
	 */
	protected void sequence_Inheritance(ISerializationContext context, Inheritance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (testTargets+=Chain | testTargets+=TestContainer)+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     stereotype=Stereotype?
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stereotype returns Stereotype
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Stereotype(ISerializationContext context, Stereotype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NgtPackage.Literals.STEREOTYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NgtPackage.Literals.STEREOTYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStereotypeAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringList returns StringList
	 *
	 * Constraint:
	 *     (list+=STRING_OR_NUMBER list+=STRING_OR_NUMBER)
	 */
	protected void sequence_StringList(ISerializationContext context, StringList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeConnection returns TargetConnection
	 *     TargetConnection returns TargetConnection
	 *
	 * Constraint:
	 *     (connector=Inheritance target=TestTarget)
	 */
	protected void sequence_TargetConnection(ISerializationContext context, TargetConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NgtPackage.Literals.TARGET_CONNECTION__CONNECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NgtPackage.Literals.TARGET_CONNECTION__CONNECTOR));
			if (transientValues.isValueTransient(semanticObject, NgtPackage.Literals.NODE_CONNECTION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NgtPackage.Literals.NODE_CONNECTION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetConnectionAccess().getConnectorInheritanceParserRuleCall_0_0(), semanticObject.getConnector());
		feeder.accept(grammarAccess.getTargetConnectionAccess().getTargetTestTargetParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TestContainerChain returns TestContainerChain
	 *
	 * Constraint:
	 *     (start=TestContainer connections+=ContainerConnection*)
	 */
	protected void sequence_TestContainerChain(ISerializationContext context, TestContainerChain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestContainer returns TestContainer
	 *
	 * Constraint:
	 *     (name=STRING (elements+=TestContainer | elements+=TestNode)*)
	 */
	protected void sequence_TestContainer(ISerializationContext context, TestContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestNode returns TestTarget
	 *     TestTarget returns TestTarget
	 *
	 * Constraint:
	 *     (name=STRING stereotype=Stereotype?)
	 */
	protected void sequence_TestTarget(ISerializationContext context, TestTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestNode returns TestViewpoint
	 *     TestViewpoint returns TestViewpoint
	 *
	 * Constraint:
	 *     (name=STRING testItems=StringList? qualityRisk=QualityRisk? coverage=STRING? stereotype=Stereotype?)
	 */
	protected void sequence_TestViewpoint(ISerializationContext context, TestViewpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeConnection returns ViewpointConnection
	 *     ViewpointConnection returns ViewpointConnection
	 *
	 * Constraint:
	 *     ((connector=Relation | connector=Dependency | connector=Inheritance) target=TestNode)
	 */
	protected void sequence_ViewpointConnection(ISerializationContext context, ViewpointConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
