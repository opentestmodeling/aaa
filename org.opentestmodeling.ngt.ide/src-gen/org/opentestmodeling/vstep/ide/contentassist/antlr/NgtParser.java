/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.opentestmodeling.vstep.ide.contentassist.antlr.internal.InternalNgtParser;
import org.opentestmodeling.vstep.services.NgtGrammarAccess;

public class NgtParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NgtGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NgtGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getTestTargetsAlternatives_0(), "rule__Model__TestTargetsAlternatives_0");
			builder.put(grammarAccess.getTestNodeAccess().getAlternatives(), "rule__TestNode__Alternatives");
			builder.put(grammarAccess.getNodeConnectionAccess().getAlternatives(), "rule__NodeConnection__Alternatives");
			builder.put(grammarAccess.getChainAccess().getAlternatives(), "rule__Chain__Alternatives");
			builder.put(grammarAccess.getNodeChainAccess().getConnectionsAlternatives_1_0(), "rule__NodeChain__ConnectionsAlternatives_1_0");
			builder.put(grammarAccess.getTestContainerAccess().getElementsAlternatives_2_1_0(), "rule__TestContainer__ElementsAlternatives_2_1_0");
			builder.put(grammarAccess.getContainerConnectionAccess().getConnectorAlternatives_0_0(), "rule__ContainerConnection__ConnectorAlternatives_0_0");
			builder.put(grammarAccess.getSTRING_OR_NUMBERAccess().getAlternatives(), "rule__STRING_OR_NUMBER__Alternatives");
			builder.put(grammarAccess.getTestTargetAccess().getGroup(), "rule__TestTarget__Group__0");
			builder.put(grammarAccess.getTestViewpointAccess().getGroup(), "rule__TestViewpoint__Group__0");
			builder.put(grammarAccess.getTestViewpointAccess().getGroup_2(), "rule__TestViewpoint__Group_2__0");
			builder.put(grammarAccess.getTestViewpointAccess().getGroup_3(), "rule__TestViewpoint__Group_3__0");
			builder.put(grammarAccess.getTestViewpointAccess().getGroup_4(), "rule__TestViewpoint__Group_4__0");
			builder.put(grammarAccess.getInheritanceAccess().getGroup(), "rule__Inheritance__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getTargetChainAccess().getGroup(), "rule__TargetChain__Group__0");
			builder.put(grammarAccess.getNodeChainAccess().getGroup(), "rule__NodeChain__Group__0");
			builder.put(grammarAccess.getStringListAccess().getGroup(), "rule__StringList__Group__0");
			builder.put(grammarAccess.getStringListAccess().getGroup_2(), "rule__StringList__Group_2__0");
			builder.put(grammarAccess.getStringListAccess().getGroup_2_1(), "rule__StringList__Group_2_1__0");
			builder.put(grammarAccess.getQualityRiskAccess().getGroup(), "rule__QualityRisk__Group__0");
			builder.put(grammarAccess.getTestContainerAccess().getGroup(), "rule__TestContainer__Group__0");
			builder.put(grammarAccess.getTestContainerAccess().getGroup_2(), "rule__TestContainer__Group_2__0");
			builder.put(grammarAccess.getContainerConnectionAccess().getGroup(), "rule__ContainerConnection__Group__0");
			builder.put(grammarAccess.getTestContainerChainAccess().getGroup(), "rule__TestContainerChain__Group__0");
			builder.put(grammarAccess.getModelAccess().getTestTargetsAssignment(), "rule__Model__TestTargetsAssignment");
			builder.put(grammarAccess.getTestTargetAccess().getNameAssignment_1(), "rule__TestTarget__NameAssignment_1");
			builder.put(grammarAccess.getTestTargetAccess().getStereotypeAssignment_3(), "rule__TestTarget__StereotypeAssignment_3");
			builder.put(grammarAccess.getTestViewpointAccess().getNameAssignment_1(), "rule__TestViewpoint__NameAssignment_1");
			builder.put(grammarAccess.getTestViewpointAccess().getTestItemsAssignment_2_1(), "rule__TestViewpoint__TestItemsAssignment_2_1");
			builder.put(grammarAccess.getTestViewpointAccess().getQualityRiskAssignment_3_1(), "rule__TestViewpoint__QualityRiskAssignment_3_1");
			builder.put(grammarAccess.getTestViewpointAccess().getCoverageAssignment_4_1(), "rule__TestViewpoint__CoverageAssignment_4_1");
			builder.put(grammarAccess.getTestViewpointAccess().getStereotypeAssignment_6(), "rule__TestViewpoint__StereotypeAssignment_6");
			builder.put(grammarAccess.getInheritanceAccess().getStereotypeAssignment_1(), "rule__Inheritance__StereotypeAssignment_1");
			builder.put(grammarAccess.getInheritanceAccess().getSourceAssignment_3(), "rule__Inheritance__SourceAssignment_3");
			builder.put(grammarAccess.getRelationAccess().getStereotypeAssignment_1(), "rule__Relation__StereotypeAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getSourceAssignment_3(), "rule__Relation__SourceAssignment_3");
			builder.put(grammarAccess.getDependencyAccess().getStereotypeAssignment_1(), "rule__Dependency__StereotypeAssignment_1");
			builder.put(grammarAccess.getDependencyAccess().getSourceAssignment_3(), "rule__Dependency__SourceAssignment_3");
			builder.put(grammarAccess.getTargetChainAccess().getStartAssignment_0(), "rule__TargetChain__StartAssignment_0");
			builder.put(grammarAccess.getTargetChainAccess().getConnectionsAssignment_1(), "rule__TargetChain__ConnectionsAssignment_1");
			builder.put(grammarAccess.getTargetChainAccess().getConnectionsAssignment_2(), "rule__TargetChain__ConnectionsAssignment_2");
			builder.put(grammarAccess.getNodeChainAccess().getStartAssignment_0(), "rule__NodeChain__StartAssignment_0");
			builder.put(grammarAccess.getNodeChainAccess().getConnectionsAssignment_1(), "rule__NodeChain__ConnectionsAssignment_1");
			builder.put(grammarAccess.getNodeChainAccess().getConnectionsAssignment_2(), "rule__NodeChain__ConnectionsAssignment_2");
			builder.put(grammarAccess.getStringListAccess().getListAssignment_2_0(), "rule__StringList__ListAssignment_2_0");
			builder.put(grammarAccess.getStringListAccess().getListAssignment_2_1_1(), "rule__StringList__ListAssignment_2_1_1");
			builder.put(grammarAccess.getQualityRiskAccess().getImportanceAssignment_2(), "rule__QualityRisk__ImportanceAssignment_2");
			builder.put(grammarAccess.getQualityRiskAccess().getSeverityAssignment_5(), "rule__QualityRisk__SeverityAssignment_5");
			builder.put(grammarAccess.getTestContainerAccess().getNameAssignment_1(), "rule__TestContainer__NameAssignment_1");
			builder.put(grammarAccess.getTestContainerAccess().getElementsAssignment_2_1(), "rule__TestContainer__ElementsAssignment_2_1");
			builder.put(grammarAccess.getContainerConnectionAccess().getConnectorAssignment_0(), "rule__ContainerConnection__ConnectorAssignment_0");
			builder.put(grammarAccess.getContainerConnectionAccess().getTargetAssignment_1(), "rule__ContainerConnection__TargetAssignment_1");
			builder.put(grammarAccess.getTestContainerChainAccess().getStartAssignment_0(), "rule__TestContainerChain__StartAssignment_0");
			builder.put(grammarAccess.getTestContainerChainAccess().getConnectionsAssignment_1(), "rule__TestContainerChain__ConnectionsAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NgtGrammarAccess grammarAccess;

	@Override
	protected InternalNgtParser createParser() {
		InternalNgtParser result = new InternalNgtParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NgtGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NgtGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
