/*
 * generated by Xtext 2.15.0
 */
grammar InternalNgt;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.opentestmodeling.vstep.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.opentestmodeling.vstep.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.opentestmodeling.vstep.services.NgtGrammarAccess;

}
@parser::members {
	private NgtGrammarAccess grammarAccess;

	public void setGrammarAccess(NgtGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTestTargetsAssignment()); }
		(rule__Model__TestTargetsAssignment)*
		{ after(grammarAccess.getModelAccess().getTestTargetsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestNode
entryRuleTestNode
:
{ before(grammarAccess.getTestNodeRule()); }
	 ruleTestNode
{ after(grammarAccess.getTestNodeRule()); } 
	 EOF 
;

// Rule TestNode
ruleTestNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestNodeAccess().getAlternatives()); }
		(rule__TestNode__Alternatives)
		{ after(grammarAccess.getTestNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestTarget
entryRuleTestTarget
:
{ before(grammarAccess.getTestTargetRule()); }
	 ruleTestTarget
{ after(grammarAccess.getTestTargetRule()); } 
	 EOF 
;

// Rule TestTarget
ruleTestTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestTargetAccess().getGroup()); }
		(rule__TestTarget__Group__0)
		{ after(grammarAccess.getTestTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestViewpoint
entryRuleTestViewpoint
:
{ before(grammarAccess.getTestViewpointRule()); }
	 ruleTestViewpoint
{ after(grammarAccess.getTestViewpointRule()); } 
	 EOF 
;

// Rule TestViewpoint
ruleTestViewpoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestViewpointAccess().getGroup()); }
		(rule__TestViewpoint__Group__0)
		{ after(grammarAccess.getTestViewpointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeConnection
entryRuleNodeConnection
:
{ before(grammarAccess.getNodeConnectionRule()); }
	 ruleNodeConnection
{ after(grammarAccess.getNodeConnectionRule()); } 
	 EOF 
;

// Rule NodeConnection
ruleNodeConnection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeConnectionAccess().getAlternatives()); }
		(rule__NodeConnection__Alternatives)
		{ after(grammarAccess.getNodeConnectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInheritance
entryRuleInheritance
:
{ before(grammarAccess.getInheritanceRule()); }
	 ruleInheritance
{ after(grammarAccess.getInheritanceRule()); } 
	 EOF 
;

// Rule Inheritance
ruleInheritance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInheritanceAccess().getGroup()); }
		(rule__Inheritance__Group__0)
		{ after(grammarAccess.getInheritanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getGroup()); }
		(rule__Relation__Group__0)
		{ after(grammarAccess.getRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependency
entryRuleDependency
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependencyAccess().getGroup()); }
		(rule__Dependency__Group__0)
		{ after(grammarAccess.getDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChain
entryRuleChain
:
{ before(grammarAccess.getChainRule()); }
	 ruleChain
{ after(grammarAccess.getChainRule()); } 
	 EOF 
;

// Rule Chain
ruleChain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChainAccess().getAlternatives()); }
		(rule__Chain__Alternatives)
		{ after(grammarAccess.getChainAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetChain
entryRuleTargetChain
:
{ before(grammarAccess.getTargetChainRule()); }
	 ruleTargetChain
{ after(grammarAccess.getTargetChainRule()); } 
	 EOF 
;

// Rule TargetChain
ruleTargetChain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetChainAccess().getGroup()); }
		(rule__TargetChain__Group__0)
		{ after(grammarAccess.getTargetChainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeChain
entryRuleNodeChain
:
{ before(grammarAccess.getNodeChainRule()); }
	 ruleNodeChain
{ after(grammarAccess.getNodeChainRule()); } 
	 EOF 
;

// Rule NodeChain
ruleNodeChain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeChainAccess().getGroup()); }
		(rule__NodeChain__Group__0)
		{ after(grammarAccess.getNodeChainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringList
entryRuleStringList
:
{ before(grammarAccess.getStringListRule()); }
	 ruleStringList
{ after(grammarAccess.getStringListRule()); } 
	 EOF 
;

// Rule StringList
ruleStringList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringListAccess().getGroup()); }
		(rule__StringList__Group__0)
		{ after(grammarAccess.getStringListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualityRisk
entryRuleQualityRisk
:
{ before(grammarAccess.getQualityRiskRule()); }
	 ruleQualityRisk
{ after(grammarAccess.getQualityRiskRule()); } 
	 EOF 
;

// Rule QualityRisk
ruleQualityRisk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualityRiskAccess().getGroup()); }
		(rule__QualityRisk__Group__0)
		{ after(grammarAccess.getQualityRiskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestContainer
entryRuleTestContainer
:
{ before(grammarAccess.getTestContainerRule()); }
	 ruleTestContainer
{ after(grammarAccess.getTestContainerRule()); } 
	 EOF 
;

// Rule TestContainer
ruleTestContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestContainerAccess().getGroup()); }
		(rule__TestContainer__Group__0)
		{ after(grammarAccess.getTestContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainerConnection
entryRuleContainerConnection
:
{ before(grammarAccess.getContainerConnectionRule()); }
	 ruleContainerConnection
{ after(grammarAccess.getContainerConnectionRule()); } 
	 EOF 
;

// Rule ContainerConnection
ruleContainerConnection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerConnectionAccess().getGroup()); }
		(rule__ContainerConnection__Group__0)
		{ after(grammarAccess.getContainerConnectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTRING_OR_NUMBER
entryRuleSTRING_OR_NUMBER
:
{ before(grammarAccess.getSTRING_OR_NUMBERRule()); }
	 ruleSTRING_OR_NUMBER
{ after(grammarAccess.getSTRING_OR_NUMBERRule()); } 
	 EOF 
;

// Rule STRING_OR_NUMBER
ruleSTRING_OR_NUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTRING_OR_NUMBERAccess().getAlternatives()); }
		(rule__STRING_OR_NUMBER__Alternatives)
		{ after(grammarAccess.getSTRING_OR_NUMBERAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TestTargetsAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTestTargetsTestNodeParserRuleCall_0_0()); }
		ruleTestNode
		{ after(grammarAccess.getModelAccess().getTestTargetsTestNodeParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getTestTargetsChainParserRuleCall_0_1()); }
		ruleChain
		{ after(grammarAccess.getModelAccess().getTestTargetsChainParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getTestTargetsTestContainerParserRuleCall_0_2()); }
		ruleTestContainer
		{ after(grammarAccess.getModelAccess().getTestTargetsTestContainerParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestNode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestNodeAccess().getTestTargetParserRuleCall_0()); }
		ruleTestTarget
		{ after(grammarAccess.getTestNodeAccess().getTestTargetParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestNodeAccess().getTestViewpointParserRuleCall_1()); }
		ruleTestViewpoint
		{ after(grammarAccess.getTestNodeAccess().getTestViewpointParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConnection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeConnectionAccess().getInheritanceParserRuleCall_0()); }
		ruleInheritance
		{ after(grammarAccess.getNodeConnectionAccess().getInheritanceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeConnectionAccess().getRelationParserRuleCall_1()); }
		ruleRelation
		{ after(grammarAccess.getNodeConnectionAccess().getRelationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNodeConnectionAccess().getDependencyParserRuleCall_2()); }
		ruleDependency
		{ after(grammarAccess.getNodeConnectionAccess().getDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChainAccess().getTargetChainParserRuleCall_0()); }
		ruleTargetChain
		{ after(grammarAccess.getChainAccess().getTargetChainParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getChainAccess().getNodeChainParserRuleCall_1()); }
		ruleNodeChain
		{ after(grammarAccess.getChainAccess().getNodeChainParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__ConnectionsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeChainAccess().getConnectionsRelationParserRuleCall_1_0_0()); }
		ruleRelation
		{ after(grammarAccess.getNodeChainAccess().getConnectionsRelationParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeChainAccess().getConnectionsDependencyParserRuleCall_1_0_1()); }
		ruleDependency
		{ after(grammarAccess.getNodeChainAccess().getConnectionsDependencyParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__ElementsAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestContainerAccess().getElementsTestContainerParserRuleCall_2_1_0_0()); }
		ruleTestContainer
		{ after(grammarAccess.getTestContainerAccess().getElementsTestContainerParserRuleCall_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestContainerAccess().getElementsTestNodeParserRuleCall_2_1_0_1()); }
		ruleTestNode
		{ after(grammarAccess.getTestContainerAccess().getElementsTestNodeParserRuleCall_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__ConnectorAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerConnectionAccess().getConnectorRelationParserRuleCall_0_0_0()); }
		ruleRelation
		{ after(grammarAccess.getContainerConnectionAccess().getConnectorRelationParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getContainerConnectionAccess().getConnectorDependencyParserRuleCall_0_0_1()); }
		ruleDependency
		{ after(grammarAccess.getContainerConnectionAccess().getConnectorDependencyParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_OR_NUMBER__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRING_OR_NUMBERAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getSTRING_OR_NUMBERAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTRING_OR_NUMBERAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getSTRING_OR_NUMBERAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestTarget__Group__0__Impl
	rule__TestTarget__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestTargetAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getTestTargetAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestTarget__Group__1__Impl
	rule__TestTarget__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestTargetAccess().getNameAssignment_1()); }
	(rule__TestTarget__NameAssignment_1)
	{ after(grammarAccess.getTestTargetAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestTarget__Group__2__Impl
	rule__TestTarget__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestTargetAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getTestTargetAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestTarget__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestTargetAccess().getStereotypeAssignment_3()); }
	(rule__TestTarget__StereotypeAssignment_3)?
	{ after(grammarAccess.getTestTargetAccess().getStereotypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestViewpoint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__0__Impl
	rule__TestViewpoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getTestViewpointAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__1__Impl
	rule__TestViewpoint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getNameAssignment_1()); }
	(rule__TestViewpoint__NameAssignment_1)
	{ after(grammarAccess.getTestViewpointAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__2__Impl
	rule__TestViewpoint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getGroup_2()); }
	(rule__TestViewpoint__Group_2__0)?
	{ after(grammarAccess.getTestViewpointAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__3__Impl
	rule__TestViewpoint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getGroup_3()); }
	(rule__TestViewpoint__Group_3__0)?
	{ after(grammarAccess.getTestViewpointAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__4__Impl
	rule__TestViewpoint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getGroup_4()); }
	(rule__TestViewpoint__Group_4__0)?
	{ after(grammarAccess.getTestViewpointAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__5__Impl
	rule__TestViewpoint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getTestViewpointAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getStereotypeAssignment_6()); }
	(rule__TestViewpoint__StereotypeAssignment_6)?
	{ after(grammarAccess.getTestViewpointAccess().getStereotypeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestViewpoint__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_2__0__Impl
	rule__TestViewpoint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTestViewpointAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getTestItemsAssignment_2_1()); }
	(rule__TestViewpoint__TestItemsAssignment_2_1)
	{ after(grammarAccess.getTestViewpointAccess().getTestItemsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestViewpoint__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_3__0__Impl
	rule__TestViewpoint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getTestViewpointAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getQualityRiskAssignment_3_1()); }
	(rule__TestViewpoint__QualityRiskAssignment_3_1)
	{ after(grammarAccess.getTestViewpointAccess().getQualityRiskAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestViewpoint__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_4__0__Impl
	rule__TestViewpoint__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getTestViewpointAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestViewpoint__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestViewpointAccess().getCoverageAssignment_4_1()); }
	(rule__TestViewpoint__CoverageAssignment_4_1)
	{ after(grammarAccess.getTestViewpointAccess().getCoverageAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Inheritance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inheritance__Group__0__Impl
	rule__Inheritance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInheritanceAccess().getLessThanSignVerticalLineHyphenMinusKeyword_0()); }
	'<|-'
	{ after(grammarAccess.getInheritanceAccess().getLessThanSignVerticalLineHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inheritance__Group__1__Impl
	rule__Inheritance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInheritanceAccess().getStereotypeAssignment_1()); }
	(rule__Inheritance__StereotypeAssignment_1)?
	{ after(grammarAccess.getInheritanceAccess().getStereotypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inheritance__Group__2__Impl
	rule__Inheritance__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInheritanceAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getInheritanceAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inheritance__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInheritanceAccess().getSourceAssignment_3()); }
	(rule__Inheritance__SourceAssignment_3)
	{ after(grammarAccess.getInheritanceAccess().getSourceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getHyphenMinusKeyword_0()); }
	'-'
	{ after(grammarAccess.getRelationAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__1__Impl
	rule__Relation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getStereotypeAssignment_1()); }
	(rule__Relation__StereotypeAssignment_1)?
	{ after(grammarAccess.getRelationAccess().getStereotypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__2__Impl
	rule__Relation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getRelationAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getSourceAssignment_3()); }
	(rule__Relation__SourceAssignment_3)
	{ after(grammarAccess.getRelationAccess().getSourceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getLessThanSignHyphenMinusKeyword_0()); }
	'<-'
	{ after(grammarAccess.getDependencyAccess().getLessThanSignHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getStereotypeAssignment_1()); }
	(rule__Dependency__StereotypeAssignment_1)?
	{ after(grammarAccess.getDependencyAccess().getStereotypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__2__Impl
	rule__Dependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getDependencyAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getSourceAssignment_3()); }
	(rule__Dependency__SourceAssignment_3)
	{ after(grammarAccess.getDependencyAccess().getSourceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetChain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetChain__Group__0__Impl
	rule__TargetChain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetChainAccess().getStartAssignment_0()); }
	(rule__TargetChain__StartAssignment_0)
	{ after(grammarAccess.getTargetChainAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetChain__Group__1__Impl
	rule__TargetChain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetChainAccess().getConnectionsAssignment_1()); }
	(rule__TargetChain__ConnectionsAssignment_1)
	{ after(grammarAccess.getTargetChainAccess().getConnectionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetChain__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetChainAccess().getConnectionsAssignment_2()); }
	(rule__TargetChain__ConnectionsAssignment_2)*
	{ after(grammarAccess.getTargetChainAccess().getConnectionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeChain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeChain__Group__0__Impl
	rule__NodeChain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeChainAccess().getStartAssignment_0()); }
	(rule__NodeChain__StartAssignment_0)
	{ after(grammarAccess.getNodeChainAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeChain__Group__1__Impl
	rule__NodeChain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeChainAccess().getConnectionsAssignment_1()); }
	(rule__NodeChain__ConnectionsAssignment_1)
	{ after(grammarAccess.getNodeChainAccess().getConnectionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeChain__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeChainAccess().getConnectionsAssignment_2()); }
	(rule__NodeChain__ConnectionsAssignment_2)*
	{ after(grammarAccess.getNodeChainAccess().getConnectionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group__0__Impl
	rule__StringList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getStringListAction_0()); }
	()
	{ after(grammarAccess.getStringListAccess().getStringListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group__1__Impl
	rule__StringList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getStringListAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group__2__Impl
	rule__StringList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getGroup_2()); }
	(rule__StringList__Group_2__0)?
	{ after(grammarAccess.getStringListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getStringListAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group_2__0__Impl
	rule__StringList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getListAssignment_2_0()); }
	(rule__StringList__ListAssignment_2_0)
	{ after(grammarAccess.getStringListAccess().getListAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getGroup_2_1()); }
	(rule__StringList__Group_2_1__0)*
	{ after(grammarAccess.getStringListAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringList__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group_2_1__0__Impl
	rule__StringList__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getStringListAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringList__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringListAccess().getListAssignment_2_1_1()); }
	(rule__StringList__ListAssignment_2_1_1)
	{ after(grammarAccess.getStringListAccess().getListAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualityRisk__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__0__Impl
	rule__QualityRisk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getQualityRiskAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__1__Impl
	rule__QualityRisk__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getImportanceKeyword_1()); }
	'importance='
	{ after(grammarAccess.getQualityRiskAccess().getImportanceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__2__Impl
	rule__QualityRisk__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getImportanceAssignment_2()); }
	(rule__QualityRisk__ImportanceAssignment_2)
	{ after(grammarAccess.getQualityRiskAccess().getImportanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__3__Impl
	rule__QualityRisk__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getQualityRiskAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__4__Impl
	rule__QualityRisk__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getSeverityKeyword_4()); }
	'severity='
	{ after(grammarAccess.getQualityRiskAccess().getSeverityKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__5__Impl
	rule__QualityRisk__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getSeverityAssignment_5()); }
	(rule__QualityRisk__SeverityAssignment_5)
	{ after(grammarAccess.getQualityRiskAccess().getSeverityAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualityRisk__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualityRiskAccess().getRightSquareBracketKeyword_6()); }
	']'
	{ after(grammarAccess.getQualityRiskAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestContainer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group__0__Impl
	rule__TestContainer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getContainerKeyword_0()); }
	'container'
	{ after(grammarAccess.getTestContainerAccess().getContainerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group__1__Impl
	rule__TestContainer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getNameAssignment_1()); }
	(rule__TestContainer__NameAssignment_1)
	{ after(grammarAccess.getTestContainerAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getGroup_2()); }
	(rule__TestContainer__Group_2__0)?
	{ after(grammarAccess.getTestContainerAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestContainer__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group_2__0__Impl
	rule__TestContainer__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getLeftCurlyBracketKeyword_2_0()); }
	'{'
	{ after(grammarAccess.getTestContainerAccess().getLeftCurlyBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group_2__1__Impl
	rule__TestContainer__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getElementsAssignment_2_1()); }
	(rule__TestContainer__ElementsAssignment_2_1)*
	{ after(grammarAccess.getTestContainerAccess().getElementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestContainer__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestContainerAccess().getRightCurlyBracketKeyword_2_2()); }
	'}'
	{ after(grammarAccess.getTestContainerAccess().getRightCurlyBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerConnection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerConnection__Group__0__Impl
	rule__ContainerConnection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerConnectionAccess().getConnectorAssignment_0()); }
	(rule__ContainerConnection__ConnectorAssignment_0)
	{ after(grammarAccess.getContainerConnectionAccess().getConnectorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerConnection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerConnectionAccess().getTargetAssignment_1()); }
	(rule__ContainerConnection__TargetAssignment_1)
	{ after(grammarAccess.getContainerConnectionAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TestTargetsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTestTargetsAlternatives_0()); }
		(rule__Model__TestTargetsAlternatives_0)
		{ after(grammarAccess.getModelAccess().getTestTargetsAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestTargetAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestTargetAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestTarget__StereotypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestTargetAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_3_0()); }
		RULE_STEREOTYPE_STRING
		{ after(grammarAccess.getTestTargetAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestViewpointAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestViewpointAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__TestItemsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestViewpointAccess().getTestItemsStringListParserRuleCall_2_1_0()); }
		ruleStringList
		{ after(grammarAccess.getTestViewpointAccess().getTestItemsStringListParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__QualityRiskAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestViewpointAccess().getQualityRiskQualityRiskParserRuleCall_3_1_0()); }
		ruleQualityRisk
		{ after(grammarAccess.getTestViewpointAccess().getQualityRiskQualityRiskParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__CoverageAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestViewpointAccess().getCoverageSTRINGTerminalRuleCall_4_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestViewpointAccess().getCoverageSTRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestViewpoint__StereotypeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestViewpointAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0()); }
		RULE_STEREOTYPE_STRING
		{ after(grammarAccess.getTestViewpointAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__StereotypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
		RULE_STEREOTYPE_STRING
		{ after(grammarAccess.getInheritanceAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inheritance__SourceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceAccess().getSourceTestNodeParserRuleCall_3_0()); }
		ruleTestNode
		{ after(grammarAccess.getInheritanceAccess().getSourceTestNodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__StereotypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
		RULE_STEREOTYPE_STRING
		{ after(grammarAccess.getRelationAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__SourceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getSourceTestNodeParserRuleCall_3_0()); }
		ruleTestNode
		{ after(grammarAccess.getRelationAccess().getSourceTestNodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__StereotypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
		RULE_STEREOTYPE_STRING
		{ after(grammarAccess.getDependencyAccess().getStereotypeSTEREOTYPE_STRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__SourceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getSourceTestNodeParserRuleCall_3_0()); }
		ruleTestNode
		{ after(grammarAccess.getDependencyAccess().getSourceTestNodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetChainAccess().getStartTestTargetParserRuleCall_0_0()); }
		ruleTestTarget
		{ after(grammarAccess.getTargetChainAccess().getStartTestTargetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__ConnectionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetChainAccess().getConnectionsInheritanceParserRuleCall_1_0()); }
		ruleInheritance
		{ after(grammarAccess.getTargetChainAccess().getConnectionsInheritanceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetChain__ConnectionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0()); }
		ruleNodeConnection
		{ after(grammarAccess.getTargetChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeChainAccess().getStartTestNodeParserRuleCall_0_0()); }
		ruleTestNode
		{ after(grammarAccess.getNodeChainAccess().getStartTestNodeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__ConnectionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeChainAccess().getConnectionsAlternatives_1_0()); }
		(rule__NodeChain__ConnectionsAlternatives_1_0)
		{ after(grammarAccess.getNodeChainAccess().getConnectionsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeChain__ConnectionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0()); }
		ruleNodeConnection
		{ after(grammarAccess.getNodeChainAccess().getConnectionsNodeConnectionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__ListAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_2_0_0()); }
		ruleSTRING_OR_NUMBER
		{ after(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringList__ListAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_2_1_1_0()); }
		ruleSTRING_OR_NUMBER
		{ after(grammarAccess.getStringListAccess().getListSTRING_OR_NUMBERParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__ImportanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualityRiskAccess().getImportanceINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getQualityRiskAccess().getImportanceINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualityRisk__SeverityAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualityRiskAccess().getSeverityINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getQualityRiskAccess().getSeverityINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestContainerAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestContainerAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestContainer__ElementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestContainerAccess().getElementsAlternatives_2_1_0()); }
		(rule__TestContainer__ElementsAlternatives_2_1_0)
		{ after(grammarAccess.getTestContainerAccess().getElementsAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__ConnectorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerConnectionAccess().getConnectorAlternatives_0_0()); }
		(rule__ContainerConnection__ConnectorAlternatives_0_0)
		{ after(grammarAccess.getContainerConnectionAccess().getConnectorAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerConnection__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerConnectionAccess().getTargetTestContainerParserRuleCall_1_0()); }
		ruleTestContainer
		{ after(grammarAccess.getContainerConnectionAccess().getTargetTestContainerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_ESCAPED_STEREOTYPE_CHAR : '\\' ('n'|'t'|'r'|'\\'|'<'|'>');

RULE_STEREOTYPE_STRING : '<<' (RULE_ESCAPED_STEREOTYPE_CHAR|~(('\\'|'<'|'>')))* '>>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
